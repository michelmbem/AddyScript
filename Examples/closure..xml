<?xml version="1.0"?>
<Program>
  <ClassDefinition ClassName="Toto">
    <Fields>
      <ClassField Name="m" Scope="Private" Modifier="Static">
        <Initializer>
          <Literal Type="int" Value="1" />
        </Initializer>
      </ClassField>
      <ClassField Name="n" Scope="Private">
        <Initializer>
          <Literal Type="int" Value="10" />
        </Initializer>
      </ClassField>
    </Fields>
    <Properties />
    <Methods>
      <ClassMethod Name="getClosureStatic" Scope="Public" Modifier="Static">
        <Parameters />
        <Body>
          <Return>
            <InlineFunction>
              <Parameters>
                <Parameter Name="x" ByRef="False" VaArgs="False" />
              </Parameters>
              <Body>
                <Return>
                  <Assignment Operator="Plus">
                    <LeftOperand>
                      <StaticPropertyRef Name="Toto::m" />
                    </LeftOperand>
                    <RightOperand>
                      <VariableRef Name="x" />
                    </RightOperand>
                  </Assignment>
                </Return>
              </Body>
            </InlineFunction>
          </Return>
        </Body>
      </ClassMethod>
      <ClassMethod Name="getClosure" Scope="Public">
        <Parameters />
        <Body>
          <Return>
            <InlineFunction>
              <Parameters>
                <Parameter Name="x" ByRef="False" VaArgs="False" />
              </Parameters>
              <Body>
                <Return>
                  <Assignment Operator="Plus">
                    <LeftOperand>
                      <PropertyRef PropertyName="n" Optional="False">
                        <Owner>
                          <ThisReference />
                        </Owner>
                      </PropertyRef>
                    </LeftOperand>
                    <RightOperand>
                      <VariableRef Name="x" />
                    </RightOperand>
                  </Assignment>
                </Return>
              </Body>
            </InlineFunction>
          </Return>
        </Body>
      </ClassMethod>
    </Methods>
    <Events />
  </ClassDefinition>
  <FunctionDecl Name="getTotoClosure">
    <Parameters />
    <Body>
      <VariableDecl>
        <PropertyInitializer Name="toto">
          <Value>
            <ConstructorCall ClassName="Toto">
              <Arguments />
            </ConstructorCall>
          </Value>
        </PropertyInitializer>
      </VariableDecl>
      <Return>
        <MethodCall FunctionName="getClosure" Optional="False">
          <Target>
            <VariableRef Name="toto" />
          </Target>
          <Arguments />
        </MethodCall>
      </Return>
    </Body>
  </FunctionDecl>
  <FunctionDecl Name="getClosure">
    <Parameters />
    <Body>
      <VariableDecl>
        <PropertyInitializer Name="n">
          <Value>
            <Literal Type="int" Value="5" />
          </Value>
        </PropertyInitializer>
      </VariableDecl>
      <Return>
        <InlineFunction>
          <Parameters>
            <Parameter Name="x" ByRef="False" VaArgs="False" />
          </Parameters>
          <Body>
            <Return>
              <Assignment Operator="Plus">
                <LeftOperand>
                  <VariableRef Name="n" />
                </LeftOperand>
                <RightOperand>
                  <VariableRef Name="x" />
                </RightOperand>
              </Assignment>
            </Return>
          </Body>
        </InlineFunction>
      </Return>
    </Body>
  </FunctionDecl>
  <FunctionCall FunctionName="println">
    <Arguments>
      <Literal Type="string" Value="Toto::getClosureStatic" />
    </Arguments>
  </FunctionCall>
  <Assignment Operator="None">
    <LeftOperand>
      <VariableRef Name="f" />
    </LeftOperand>
    <RightOperand>
      <StaticMethodCall Name="Toto::getClosureStatic">
        <Arguments />
      </StaticMethodCall>
    </RightOperand>
  </Assignment>
  <ForLoop>
    <Initializers>
      <Assignment Operator="None">
        <LeftOperand>
          <VariableRef Name="i" />
        </LeftOperand>
        <RightOperand>
          <Literal Type="int" Value="0" />
        </RightOperand>
      </Assignment>
    </Initializers>
    <Guard>
      <BinaryExpression Operator="LessThan">
        <LeftOperand>
          <VariableRef Name="i" />
        </LeftOperand>
        <RightOperand>
          <Literal Type="int" Value="10" />
        </RightOperand>
      </BinaryExpression>
    </Guard>
    <Updaters>
      <Assignment Operator="Plus">
        <LeftOperand>
          <VariableRef Name="i" />
        </LeftOperand>
        <RightOperand>
          <Literal Type="int" Value="2" />
        </RightOperand>
      </Assignment>
    </Updaters>
    <Action>
      <FunctionCall FunctionName="println">
        <Arguments>
          <FunctionCall FunctionName="f">
            <Arguments>
              <VariableRef Name="i" />
            </Arguments>
          </FunctionCall>
        </Arguments>
      </FunctionCall>
    </Action>
  </ForLoop>
  <FunctionCall FunctionName="println">
    <Arguments />
  </FunctionCall>
  <FunctionCall FunctionName="println">
    <Arguments>
      <Literal Type="string" Value="Toto::getClosure" />
    </Arguments>
  </FunctionCall>
  <Assignment Operator="None">
    <LeftOperand>
      <VariableRef Name="g" />
    </LeftOperand>
    <RightOperand>
      <MethodCall FunctionName="getClosure" Optional="False">
        <Target>
          <ConstructorCall ClassName="Toto">
            <Arguments />
          </ConstructorCall>
        </Target>
        <Arguments />
      </MethodCall>
    </RightOperand>
  </Assignment>
  <ForLoop>
    <Initializers>
      <Assignment Operator="None">
        <LeftOperand>
          <VariableRef Name="i" />
        </LeftOperand>
        <RightOperand>
          <Literal Type="int" Value="0" />
        </RightOperand>
      </Assignment>
    </Initializers>
    <Guard>
      <BinaryExpression Operator="LessThan">
        <LeftOperand>
          <VariableRef Name="i" />
        </LeftOperand>
        <RightOperand>
          <Literal Type="int" Value="10" />
        </RightOperand>
      </BinaryExpression>
    </Guard>
    <Updaters>
      <Assignment Operator="Plus">
        <LeftOperand>
          <VariableRef Name="i" />
        </LeftOperand>
        <RightOperand>
          <Literal Type="int" Value="2" />
        </RightOperand>
      </Assignment>
    </Updaters>
    <Action>
      <FunctionCall FunctionName="println">
        <Arguments>
          <FunctionCall FunctionName="g">
            <Arguments>
              <VariableRef Name="i" />
            </Arguments>
          </FunctionCall>
        </Arguments>
      </FunctionCall>
    </Action>
  </ForLoop>
  <FunctionCall FunctionName="println">
    <Arguments />
  </FunctionCall>
  <FunctionCall FunctionName="println">
    <Arguments>
      <Literal Type="string" Value="getTotoClosure" />
    </Arguments>
  </FunctionCall>
  <Assignment Operator="None">
    <LeftOperand>
      <VariableRef Name="h" />
    </LeftOperand>
    <RightOperand>
      <FunctionCall FunctionName="getTotoClosure">
        <Arguments />
      </FunctionCall>
    </RightOperand>
  </Assignment>
  <ForLoop>
    <Initializers>
      <Assignment Operator="None">
        <LeftOperand>
          <VariableRef Name="i" />
        </LeftOperand>
        <RightOperand>
          <Literal Type="int" Value="0" />
        </RightOperand>
      </Assignment>
    </Initializers>
    <Guard>
      <BinaryExpression Operator="LessThan">
        <LeftOperand>
          <VariableRef Name="i" />
        </LeftOperand>
        <RightOperand>
          <Literal Type="int" Value="10" />
        </RightOperand>
      </BinaryExpression>
    </Guard>
    <Updaters>
      <Assignment Operator="Plus">
        <LeftOperand>
          <VariableRef Name="i" />
        </LeftOperand>
        <RightOperand>
          <Literal Type="int" Value="2" />
        </RightOperand>
      </Assignment>
    </Updaters>
    <Action>
      <FunctionCall FunctionName="println">
        <Arguments>
          <FunctionCall FunctionName="h">
            <Arguments>
              <VariableRef Name="i" />
            </Arguments>
          </FunctionCall>
        </Arguments>
      </FunctionCall>
    </Action>
  </ForLoop>
  <FunctionCall FunctionName="println">
    <Arguments />
  </FunctionCall>
  <FunctionCall FunctionName="println">
    <Arguments>
      <Literal Type="string" Value="getClosure" />
    </Arguments>
  </FunctionCall>
  <Assignment Operator="None">
    <LeftOperand>
      <VariableRef Name="j" />
    </LeftOperand>
    <RightOperand>
      <FunctionCall FunctionName="getClosure">
        <Arguments />
      </FunctionCall>
    </RightOperand>
  </Assignment>
  <ForLoop>
    <Initializers>
      <Assignment Operator="None">
        <LeftOperand>
          <VariableRef Name="i" />
        </LeftOperand>
        <RightOperand>
          <Literal Type="int" Value="0" />
        </RightOperand>
      </Assignment>
    </Initializers>
    <Guard>
      <BinaryExpression Operator="LessThan">
        <LeftOperand>
          <VariableRef Name="i" />
        </LeftOperand>
        <RightOperand>
          <Literal Type="int" Value="10" />
        </RightOperand>
      </BinaryExpression>
    </Guard>
    <Updaters>
      <Assignment Operator="Plus">
        <LeftOperand>
          <VariableRef Name="i" />
        </LeftOperand>
        <RightOperand>
          <Literal Type="int" Value="2" />
        </RightOperand>
      </Assignment>
    </Updaters>
    <Action>
      <FunctionCall FunctionName="println">
        <Arguments>
          <FunctionCall FunctionName="j">
            <Arguments>
              <VariableRef Name="i" />
            </Arguments>
          </FunctionCall>
        </Arguments>
      </FunctionCall>
    </Action>
  </ForLoop>
  <FunctionCall FunctionName="readln">
    <Arguments />
  </FunctionCall>
</Program>