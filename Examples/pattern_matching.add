class Employee
{
	public constructor(name, age, salary, dateHired)
	{
		this.name = name;
		this.age = age;
		this.salary = salary;
		this.dateHired = dateHired;
	}
	
	public property name;
	
	public property age;
	
	public property salary;
	
	public property dateHired;
	
	public function toString(fmt = '') =>
		$'Employee {{name: {this.name}, age: {this.age}, salary: {this.salary}, dateHired: {this.dateHired:d}}}';
}

class Developper : Employee
{
	public constructor(name, age, salary, dateHired, languages)
		: super(name, age, salary, dateHired)
	{
		this.languages = languages;
	}
	
	public property languages;
	
	public function toString(fmt = '') =>
		$'Developper {{name: {this.name}, age: {this.age}, salary: {this.salary}, dateHired: {this.dateHired:d}, languages: {this.languages.join("|")}}}';
}

o = new {name = 'my object', size = 18, color = 'blue'};
res = o switch {
	null => 'null';
	5 => 'five';
	{height = 150, color = 'blue'} => 'a blue and 150 tall object';
	{name = 'my object', size = 18} => 'my object of size 18';
};
println($'o is {o}');
println($'result with o: {res}');
println();

res = PI switch {
	3.14 => 'three-point-fourteen';
	0, 1, 2..4, 5..8, 9 => 'in the set {0, 1, 2 to 4, 5 to 8, 9}';
	float => 'a floatting-point number';
};
println($'result with PI: {res}');
println();

res = ((int)readln('type a number: ')) switch {
	..-1 => 'negative';
	0..4 => 'from 0 to 4';
	5..9 => {
		print('yeah i know, ');
		println('it\'s between 5 and 9!');
		return __value;
	}
	10.. => '10 and above';
};
println($'result: {res}');
println();

const number_regex = @'[+-]?\d+(\.\d+)?([Ee][+-]?\d+)?';

res = readln('type some text: ') switch {
	x: x matches number_regex && ((decimal)x) > 0 => 'it\'s a positive number';
	x: x matches number_regex => 'it\'s just a number';
	_ => 'it\'s not a number';
};
println($'result: {res}');
println();

l = [
	new Employee('Franklin Kenyata', 44, 5000, `2010-01-14`),
	new Employee('Jeanette DiabatÃ©', 32, 3500, `2014-09-30`),
	new Developper('Dereck Musa', 44, 4200, `2010-01-14`, ['C++', 'C#', 'Java']),
	null,
	new Exception('this is an exception')
];

l.add(l[0] with { name = 'Ahmadu Suleyman', salary = 7000 });
l.add(l[2] with { name = 'Kim Ondo', age = 36, languages = ['Python', 'TypeScript'] });

l.each(|item| => {
	res = item switch {
		null => 'this item is null';
		Employee {age = 44, dateHired = `2010-01-14`} =>
			$'{item.name} is 44 years old, he/she was hired on 2010-01-14 and earns ${item.salary}/month';
		_ => 'neither null nor a 44 years old employee hired on 2010-01-14';
	};
	println($'item = {item}');
	println($'result with item: {res}');
	println('-' * 110);
});
println();

try {
	randint(-7, 3) switch {
		0..3 => println($'{__value} is OK!');
		_ => throw 'I don\'t like negative values';
	};
} catch (e) {
	println(e.name + ' : ' + e.message);
}

readln();