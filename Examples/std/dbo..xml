<?xml version="1.0"?>
<Program>
  <ImportDirective ModuleName="dbo::command" />
  <ClassDefinition ClassName="DBO">
    <Constructor>
      <ClassMethodDecl Name="DBO" Scope="Public">
        <Parameters>
          <ParameterDecl Name="providerName" ByRef="False" VaArgs="False" />
          <ParameterDecl Name="connectionString" ByRef="False" VaArgs="False" />
        </Parameters>
        <Body>
          <Assignment Operator="None">
            <LeftOperand>
              <PropertyRef PropertyName="connection" Optional="False">
                <Owner>
                  <SelfReference />
                </Owner>
              </PropertyRef>
            </LeftOperand>
            <RightOperand>
              <ConstructorCall ClassName="DBOConnection">
                <Arguments>
                  <VariableRef Name="providerName" />
                  <VariableRef Name="connectionString" />
                </Arguments>
              </ConstructorCall>
            </RightOperand>
          </Assignment>
          <MethodCall FunctionName="open" Optional="False">
            <Target>
              <PropertyRef PropertyName="connection" Optional="False">
                <Owner>
                  <SelfReference />
                </Owner>
              </PropertyRef>
            </Target>
            <Arguments />
          </MethodCall>
        </Body>
      </ClassMethodDecl>
    </Constructor>
    <Fields>
      <ClassFieldDecl Name="connection" Scope="Private" />
    </Fields>
    <Properties />
    <Methods>
      <ClassMethodDecl Name="query" Scope="Public">
        <Parameters>
          <ParameterDecl Name="commandText" ByRef="False" VaArgs="False" />
          <ParameterDecl Name="fetch" ByRef="False" VaArgs="False" DefaultValue="" />
        </Parameters>
        <Body>
          <VariableDecl>
            <PropertyInitializer Name="command" />
            <PropertyInitializer Name="reader" />
            <PropertyInitializer Name="result" />
          </VariableDecl>
          <IfElse>
            <Condition>
              <BinaryExpression Operator="Identical">
                <LeftOperand>
                  <VariableRef Name="fetch" />
                </LeftOperand>
                <RightOperand>
                  <Literal Type="void" Value="" />
                </RightOperand>
              </BinaryExpression>
            </Condition>
            <PositiveAction>
              <Assignment Operator="None">
                <LeftOperand>
                  <VariableRef Name="fetch" />
                </LeftOperand>
                <RightOperand>
                  <VariableRef Name="fetch_index_list" />
                </RightOperand>
              </Assignment>
            </PositiveAction>
          </IfElse>
          <TryCatchFinally ExceptionName="ex">
            <TryBlock>
              <Assignment Operator="None">
                <LeftOperand>
                  <VariableRef Name="command" />
                </LeftOperand>
                <RightOperand>
                  <MethodCall FunctionName="createCommand" Optional="False">
                    <Target>
                      <PropertyRef PropertyName="connection" Optional="False">
                        <Owner>
                          <SelfReference />
                        </Owner>
                      </PropertyRef>
                    </Target>
                    <Arguments>
                      <VariableRef Name="commandText" />
                    </Arguments>
                  </MethodCall>
                </RightOperand>
              </Assignment>
              <Assignment Operator="None">
                <LeftOperand>
                  <PropertyRef PropertyName="Transaction" Optional="False">
                    <Owner>
                      <VariableRef Name="command" />
                    </Owner>
                  </PropertyRef>
                </LeftOperand>
                <RightOperand>
                  <PropertyRef PropertyName="transaction" Optional="False">
                    <Owner>
                      <PropertyRef PropertyName="connection" Optional="False">
                        <Owner>
                          <SelfReference />
                        </Owner>
                      </PropertyRef>
                    </Owner>
                  </PropertyRef>
                </RightOperand>
              </Assignment>
              <Assignment Operator="None">
                <LeftOperand>
                  <VariableRef Name="reader" />
                </LeftOperand>
                <RightOperand>
                  <MethodCall FunctionName="ExecuteReader" Optional="False">
                    <Target>
                      <VariableRef Name="command" />
                    </Target>
                    <Arguments />
                  </MethodCall>
                </RightOperand>
              </Assignment>
              <Assignment Operator="None">
                <LeftOperand>
                  <VariableRef Name="result" />
                </LeftOperand>
                <RightOperand>
                  <FunctionCall FunctionName="fetch">
                    <Arguments>
                      <VariableRef Name="reader" />
                    </Arguments>
                  </FunctionCall>
                </RightOperand>
              </Assignment>
            </TryBlock>
            <CatchBlock>
              <Throw>
                <VariableRef Name="ex" />
              </Throw>
            </CatchBlock>
            <FinallyBlock>
              <TryCatchFinally ExceptionName="ex1">
                <TryBlock>
                  <MethodCall FunctionName="Close" Optional="False">
                    <Target>
                      <VariableRef Name="reader" />
                    </Target>
                    <Arguments />
                  </MethodCall>
                </TryBlock>
                <CatchBlock />
              </TryCatchFinally>
            </FinallyBlock>
          </TryCatchFinally>
          <Return>
            <VariableRef Name="result" />
          </Return>
        </Body>
      </ClassMethodDecl>
      <ClassMethodDecl Name="queryScalar" Scope="Public">
        <Parameters>
          <ParameterDecl Name="commandText" ByRef="False" VaArgs="False" />
        </Parameters>
        <Body>
          <VariableDecl>
            <PropertyInitializer Name="command" />
            <PropertyInitializer Name="result" />
          </VariableDecl>
          <TryCatchFinally ExceptionName="ex">
            <TryBlock>
              <Assignment Operator="None">
                <LeftOperand>
                  <VariableRef Name="command" />
                </LeftOperand>
                <RightOperand>
                  <MethodCall FunctionName="createCommand" Optional="False">
                    <Target>
                      <PropertyRef PropertyName="connection" Optional="False">
                        <Owner>
                          <SelfReference />
                        </Owner>
                      </PropertyRef>
                    </Target>
                    <Arguments>
                      <VariableRef Name="commandText" />
                    </Arguments>
                  </MethodCall>
                </RightOperand>
              </Assignment>
              <Assignment Operator="None">
                <LeftOperand>
                  <PropertyRef PropertyName="Transaction" Optional="False">
                    <Owner>
                      <VariableRef Name="command" />
                    </Owner>
                  </PropertyRef>
                </LeftOperand>
                <RightOperand>
                  <PropertyRef PropertyName="transaction" Optional="False">
                    <Owner>
                      <PropertyRef PropertyName="connection" Optional="False">
                        <Owner>
                          <SelfReference />
                        </Owner>
                      </PropertyRef>
                    </Owner>
                  </PropertyRef>
                </RightOperand>
              </Assignment>
              <Assignment Operator="None">
                <LeftOperand>
                  <VariableRef Name="result" />
                </LeftOperand>
                <RightOperand>
                  <MethodCall FunctionName="ExecuteScalar" Optional="False">
                    <Target>
                      <VariableRef Name="command" />
                    </Target>
                    <Arguments />
                  </MethodCall>
                </RightOperand>
              </Assignment>
            </TryBlock>
            <CatchBlock>
              <Throw>
                <VariableRef Name="ex" />
              </Throw>
            </CatchBlock>
          </TryCatchFinally>
          <Return>
            <VariableRef Name="result" />
          </Return>
        </Body>
      </ClassMethodDecl>
      <ClassMethodDecl Name="find" Scope="Public">
        <Parameters>
          <ParameterDecl Name="table" ByRef="False" VaArgs="False" />
          <ParameterDecl Name="field" ByRef="False" VaArgs="False" />
          <ParameterDecl Name="condition" ByRef="False" VaArgs="False" />
        </Parameters>
        <Body>
          <VariableDecl>
            <PropertyInitializer Name="sb">
              <Value>
                <ConstructorCall ClassName="System::Text::StringBuilder">
                  <Arguments />
                </ConstructorCall>
              </Value>
            </PropertyInitializer>
          </VariableDecl>
          <MethodCall FunctionName="Append" Optional="False">
            <Target>
              <MethodCall FunctionName="Append" Optional="False">
                <Target>
                  <MethodCall FunctionName="Append" Optional="False">
                    <Target>
                      <MethodCall FunctionName="Append" Optional="False">
                        <Target>
                          <MethodCall FunctionName="Append" Optional="False">
                            <Target>
                              <MethodCall FunctionName="Append" Optional="False">
                                <Target>
                                  <VariableRef Name="sb" />
                                </Target>
                                <Arguments>
                                  <Literal Type="string" Value="SELECT " />
                                </Arguments>
                              </MethodCall>
                            </Target>
                            <Arguments>
                              <VariableRef Name="field" />
                            </Arguments>
                          </MethodCall>
                        </Target>
                        <Arguments>
                          <Literal Type="string" Value=" FROM " />
                        </Arguments>
                      </MethodCall>
                    </Target>
                    <Arguments>
                      <VariableRef Name="table" />
                    </Arguments>
                  </MethodCall>
                </Target>
                <Arguments>
                  <Literal Type="string" Value=" WHERE " />
                </Arguments>
              </MethodCall>
            </Target>
            <Arguments>
              <VariableRef Name="condition" />
            </Arguments>
          </MethodCall>
          <Return>
            <MethodCall FunctionName="queryScalar" Optional="False">
              <Target>
                <SelfReference />
              </Target>
              <Arguments>
                <MethodCall FunctionName="ToString" Optional="False">
                  <Target>
                    <VariableRef Name="sb" />
                  </Target>
                  <Arguments />
                </MethodCall>
              </Arguments>
            </MethodCall>
          </Return>
        </Body>
      </ClassMethodDecl>
      <ClassMethodDecl Name="exec" Scope="Public">
        <Parameters>
          <ParameterDecl Name="commandText" ByRef="False" VaArgs="False" />
        </Parameters>
        <Body>
          <VariableDecl>
            <PropertyInitializer Name="command" />
            <PropertyInitializer Name="result" />
          </VariableDecl>
          <TryCatchFinally ExceptionName="ex">
            <TryBlock>
              <Assignment Operator="None">
                <LeftOperand>
                  <VariableRef Name="command" />
                </LeftOperand>
                <RightOperand>
                  <MethodCall FunctionName="createCommand" Optional="False">
                    <Target>
                      <PropertyRef PropertyName="connection" Optional="False">
                        <Owner>
                          <SelfReference />
                        </Owner>
                      </PropertyRef>
                    </Target>
                    <Arguments>
                      <VariableRef Name="commandText" />
                    </Arguments>
                  </MethodCall>
                </RightOperand>
              </Assignment>
              <Assignment Operator="None">
                <LeftOperand>
                  <PropertyRef PropertyName="Transaction" Optional="False">
                    <Owner>
                      <VariableRef Name="command" />
                    </Owner>
                  </PropertyRef>
                </LeftOperand>
                <RightOperand>
                  <PropertyRef PropertyName="transaction" Optional="False">
                    <Owner>
                      <PropertyRef PropertyName="connection" Optional="False">
                        <Owner>
                          <SelfReference />
                        </Owner>
                      </PropertyRef>
                    </Owner>
                  </PropertyRef>
                </RightOperand>
              </Assignment>
              <Assignment Operator="None">
                <LeftOperand>
                  <VariableRef Name="result" />
                </LeftOperand>
                <RightOperand>
                  <MethodCall FunctionName="ExecuteNonQuery" Optional="False">
                    <Target>
                      <VariableRef Name="command" />
                    </Target>
                    <Arguments />
                  </MethodCall>
                </RightOperand>
              </Assignment>
            </TryBlock>
            <CatchBlock>
              <Throw>
                <VariableRef Name="ex" />
              </Throw>
            </CatchBlock>
          </TryCatchFinally>
          <Return>
            <VariableRef Name="result" />
          </Return>
        </Body>
      </ClassMethodDecl>
      <ClassMethodDecl Name="eachRow" Scope="Public">
        <Parameters>
          <ParameterDecl Name="commandText" ByRef="False" VaArgs="False" />
          <ParameterDecl Name="action" ByRef="False" VaArgs="False" />
          <ParameterDecl Name="processor" ByRef="False" VaArgs="False" DefaultValue="" />
        </Parameters>
        <Body>
          <VariableDecl>
            <PropertyInitializer Name="command" />
            <PropertyInitializer Name="iterator" />
            <PropertyInitializer Name="row" />
          </VariableDecl>
          <IfElse>
            <Condition>
              <BinaryExpression Operator="Identical">
                <LeftOperand>
                  <VariableRef Name="processor" />
                </LeftOperand>
                <RightOperand>
                  <Literal Type="void" Value="" />
                </RightOperand>
              </BinaryExpression>
            </Condition>
            <PositiveAction>
              <Assignment Operator="None">
                <LeftOperand>
                  <VariableRef Name="processor" />
                </LeftOperand>
                <RightOperand>
                  <VariableRef Name="to_object" />
                </RightOperand>
              </Assignment>
            </PositiveAction>
          </IfElse>
          <TryCatchFinally ExceptionName="ex">
            <TryBlock>
              <Assignment Operator="None">
                <LeftOperand>
                  <VariableRef Name="command" />
                </LeftOperand>
                <RightOperand>
                  <MethodCall FunctionName="createCommand" Optional="False">
                    <Target>
                      <PropertyRef PropertyName="connection" Optional="False">
                        <Owner>
                          <SelfReference />
                        </Owner>
                      </PropertyRef>
                    </Target>
                    <Arguments>
                      <VariableRef Name="commandText" />
                    </Arguments>
                  </MethodCall>
                </RightOperand>
              </Assignment>
              <Assignment Operator="None">
                <LeftOperand>
                  <PropertyRef PropertyName="Transaction" Optional="False">
                    <Owner>
                      <VariableRef Name="command" />
                    </Owner>
                  </PropertyRef>
                </LeftOperand>
                <RightOperand>
                  <PropertyRef PropertyName="transaction" Optional="False">
                    <Owner>
                      <PropertyRef PropertyName="connection" Optional="False">
                        <Owner>
                          <SelfReference />
                        </Owner>
                      </PropertyRef>
                    </Owner>
                  </PropertyRef>
                </RightOperand>
              </Assignment>
              <Assignment Operator="None">
                <LeftOperand>
                  <VariableRef Name="iterator" />
                </LeftOperand>
                <RightOperand>
                  <ConstructorCall ClassName="DBOIterator">
                    <Arguments>
                      <VariableRef Name="command" />
                      <VariableRef Name="processor" />
                    </Arguments>
                  </ConstructorCall>
                </RightOperand>
              </Assignment>
              <ForEachLoop ValueName="row">
                <Enumerated>
                  <VariableRef Name="iterator" />
                </Enumerated>
                <Action>
                  <FunctionCall FunctionName="action">
                    <Arguments>
                      <VariableRef Name="row" />
                    </Arguments>
                  </FunctionCall>
                </Action>
              </ForEachLoop>
            </TryBlock>
            <CatchBlock>
              <Throw>
                <VariableRef Name="ex" />
              </Throw>
            </CatchBlock>
            <FinallyBlock>
              <TryCatchFinally ExceptionName="ex1">
                <TryBlock>
                  <MethodCall FunctionName="dispose" Optional="False">
                    <Target>
                      <VariableRef Name="iterator" />
                    </Target>
                    <Arguments />
                  </MethodCall>
                </TryBlock>
                <CatchBlock />
              </TryCatchFinally>
            </FinallyBlock>
          </TryCatchFinally>
        </Body>
      </ClassMethodDecl>
      <ClassMethodDecl Name="fill" Scope="Public">
        <Parameters>
          <ParameterDecl Name="dataSet" ByRef="False" VaArgs="False" />
          <ParameterDecl Name="tableName" ByRef="False" VaArgs="False" />
          <ParameterDecl Name="commandText" ByRef="False" VaArgs="False" />
          <ParameterDecl Name="createCmdBldr" ByRef="False" VaArgs="False" DefaultValue="Faux" />
        </Parameters>
        <Body>
          <VariableDecl>
            <PropertyInitializer Name="command" />
            <PropertyInitializer Name="adapter" />
          </VariableDecl>
          <TryCatchFinally ExceptionName="ex">
            <TryBlock>
              <Assignment Operator="None">
                <LeftOperand>
                  <VariableRef Name="command" />
                </LeftOperand>
                <RightOperand>
                  <MethodCall FunctionName="createCommand" Optional="False">
                    <Target>
                      <PropertyRef PropertyName="connection" Optional="False">
                        <Owner>
                          <SelfReference />
                        </Owner>
                      </PropertyRef>
                    </Target>
                    <Arguments>
                      <VariableRef Name="commandText" />
                    </Arguments>
                  </MethodCall>
                </RightOperand>
              </Assignment>
              <Assignment Operator="None">
                <LeftOperand>
                  <PropertyRef PropertyName="Transaction" Optional="False">
                    <Owner>
                      <VariableRef Name="command" />
                    </Owner>
                  </PropertyRef>
                </LeftOperand>
                <RightOperand>
                  <PropertyRef PropertyName="transaction" Optional="False">
                    <Owner>
                      <PropertyRef PropertyName="connection" Optional="False">
                        <Owner>
                          <SelfReference />
                        </Owner>
                      </PropertyRef>
                    </Owner>
                  </PropertyRef>
                </RightOperand>
              </Assignment>
              <Assignment Operator="None">
                <LeftOperand>
                  <VariableRef Name="adapter" />
                </LeftOperand>
                <RightOperand>
                  <StaticMethodCall Name="DBOConfig::createDataAdapter">
                    <Arguments>
                      <VariableRef Name="command" />
                    </Arguments>
                  </StaticMethodCall>
                </RightOperand>
              </Assignment>
              <MethodCall FunctionName="Fill" Optional="False">
                <Target>
                  <VariableRef Name="adapter" />
                </Target>
                <Arguments>
                  <VariableRef Name="dataSet" />
                  <VariableRef Name="tableName" />
                </Arguments>
              </MethodCall>
              <IfElse>
                <Condition>
                  <VariableRef Name="createCmdBldr" />
                </Condition>
                <PositiveAction>
                  <StaticMethodCall Name="DBOConfig::createCommandBuilder">
                    <Arguments>
                      <VariableRef Name="adapter" />
                    </Arguments>
                  </StaticMethodCall>
                </PositiveAction>
              </IfElse>
            </TryBlock>
            <CatchBlock>
              <Throw>
                <VariableRef Name="ex" />
              </Throw>
            </CatchBlock>
          </TryCatchFinally>
          <Return>
            <VariableRef Name="adapter" />
          </Return>
        </Body>
      </ClassMethodDecl>
      <ClassMethodDecl Name="getDataSet" Scope="Public">
        <Parameters>
          <ParameterDecl Name="tableName" ByRef="False" VaArgs="False" />
          <ParameterDecl Name="commandText" ByRef="False" VaArgs="False" />
        </Parameters>
        <Body>
          <VariableDecl>
            <PropertyInitializer Name="dataSet">
              <Value>
                <ConstructorCall ClassName="System::Data::DataSet">
                  <Arguments>
                    <VariableRef Name="tableName" />
                  </Arguments>
                </ConstructorCall>
              </Value>
            </PropertyInitializer>
          </VariableDecl>
          <MethodCall FunctionName="Dispose" Optional="False">
            <Target>
              <MethodCall FunctionName="fill" Optional="False">
                <Target>
                  <SelfReference />
                </Target>
                <Arguments>
                  <VariableRef Name="dataSet" />
                  <VariableRef Name="tableName" />
                  <VariableRef Name="commandText" />
                </Arguments>
              </MethodCall>
            </Target>
            <Arguments />
          </MethodCall>
          <Return>
            <VariableRef Name="dataSet" />
          </Return>
        </Body>
      </ClassMethodDecl>
      <ClassMethodDecl Name="prepare" Scope="Public">
        <Parameters>
          <ParameterDecl Name="commandText" ByRef="False" VaArgs="False" />
          <ParameterDecl Name="commandType" ByRef="False" VaArgs="False" DefaultValue="Text" />
        </Parameters>
        <Body>
          <Return>
            <ConstructorCall ClassName="DBOCommand">
              <Arguments>
                <PropertyRef PropertyName="connection" Optional="False">
                  <Owner>
                    <SelfReference />
                  </Owner>
                </PropertyRef>
                <VariableRef Name="commandText" />
                <VariableRef Name="commandType" />
              </Arguments>
            </ConstructorCall>
          </Return>
        </Body>
      </ClassMethodDecl>
      <ClassMethodDecl Name="execMany" Scope="Public">
        <Parameters>
          <ParameterDecl Name="commandText" ByRef="False" VaArgs="False" />
          <ParameterDecl Name="parameters" ByRef="False" VaArgs="False" />
          <ParameterDecl Name="values" ByRef="False" VaArgs="False" />
        </Parameters>
        <Body>
          <VariableDecl>
            <PropertyInitializer Name="cmd">
              <Value>
                <MethodCall FunctionName="addParams" Optional="False">
                  <Target>
                    <MethodCall FunctionName="prepare" Optional="False">
                      <Target>
                        <SelfReference />
                      </Target>
                      <Arguments>
                        <VariableRef Name="commandText" />
                      </Arguments>
                    </MethodCall>
                  </Target>
                  <Arguments>
                    <VariableRef Name="parameters" />
                  </Arguments>
                </MethodCall>
              </Value>
            </PropertyInitializer>
          </VariableDecl>
          <MethodCall FunctionName="each" Optional="False">
            <Target>
              <VariableRef Name="values" />
            </Target>
            <Arguments>
              <InlineFunction>
                <Parameters>
                  <ParameterDecl Name="v" ByRef="False" VaArgs="False" />
                </Parameters>
                <Body>
                  <Return>
                    <MethodCall FunctionName="exec" Optional="False">
                      <Target>
                        <MethodCall FunctionName="setAllParams" Optional="False">
                          <Target>
                            <VariableRef Name="cmd" />
                          </Target>
                          <Arguments>
                            <VariableRef Name="v" />
                          </Arguments>
                        </MethodCall>
                      </Target>
                      <Arguments />
                    </MethodCall>
                  </Return>
                </Body>
              </InlineFunction>
            </Arguments>
          </MethodCall>
        </Body>
      </ClassMethodDecl>
      <ClassMethodDecl Name="beginTransaction" Scope="Public">
        <Parameters />
        <Body>
          <MethodCall FunctionName="beginTransaction" Optional="False">
            <Target>
              <PropertyRef PropertyName="connection" Optional="False">
                <Owner>
                  <SelfReference />
                </Owner>
              </PropertyRef>
            </Target>
            <Arguments />
          </MethodCall>
        </Body>
      </ClassMethodDecl>
      <ClassMethodDecl Name="commit" Scope="Public">
        <Parameters />
        <Body>
          <MethodCall FunctionName="commit" Optional="False">
            <Target>
              <PropertyRef PropertyName="connection" Optional="False">
                <Owner>
                  <SelfReference />
                </Owner>
              </PropertyRef>
            </Target>
            <Arguments />
          </MethodCall>
        </Body>
      </ClassMethodDecl>
      <ClassMethodDecl Name="rollback" Scope="Public">
        <Parameters />
        <Body>
          <MethodCall FunctionName="rollback" Optional="False">
            <Target>
              <PropertyRef PropertyName="connection" Optional="False">
                <Owner>
                  <SelfReference />
                </Owner>
              </PropertyRef>
            </Target>
            <Arguments />
          </MethodCall>
        </Body>
      </ClassMethodDecl>
      <ClassMethodDecl Name="commitAll" Scope="Public">
        <Parameters />
        <Body>
          <WhileLoop>
            <Guard>
              <PropertyRef PropertyName="inTransaction" Optional="False">
                <Owner>
                  <PropertyRef PropertyName="connection" Optional="False">
                    <Owner>
                      <SelfReference />
                    </Owner>
                  </PropertyRef>
                </Owner>
              </PropertyRef>
            </Guard>
            <Action>
              <MethodCall FunctionName="commit" Optional="False">
                <Target>
                  <PropertyRef PropertyName="connection" Optional="False">
                    <Owner>
                      <SelfReference />
                    </Owner>
                  </PropertyRef>
                </Target>
                <Arguments />
              </MethodCall>
            </Action>
          </WhileLoop>
        </Body>
      </ClassMethodDecl>
      <ClassMethodDecl Name="rollbackAll" Scope="Public">
        <Parameters />
        <Body>
          <WhileLoop>
            <Guard>
              <PropertyRef PropertyName="inTransaction" Optional="False">
                <Owner>
                  <PropertyRef PropertyName="connection" Optional="False">
                    <Owner>
                      <SelfReference />
                    </Owner>
                  </PropertyRef>
                </Owner>
              </PropertyRef>
            </Guard>
            <Action>
              <MethodCall FunctionName="rollback" Optional="False">
                <Target>
                  <PropertyRef PropertyName="connection" Optional="False">
                    <Owner>
                      <SelfReference />
                    </Owner>
                  </PropertyRef>
                </Target>
                <Arguments />
              </MethodCall>
            </Action>
          </WhileLoop>
        </Body>
      </ClassMethodDecl>
      <ClassMethodDecl Name="reconnect" Scope="Public">
        <Parameters />
        <Body>
          <MethodCall FunctionName="close" Optional="False">
            <Target>
              <PropertyRef PropertyName="connection" Optional="False">
                <Owner>
                  <SelfReference />
                </Owner>
              </PropertyRef>
            </Target>
            <Arguments />
          </MethodCall>
          <MethodCall FunctionName="open" Optional="False">
            <Target>
              <PropertyRef PropertyName="connection" Optional="False">
                <Owner>
                  <SelfReference />
                </Owner>
              </PropertyRef>
            </Target>
            <Arguments />
          </MethodCall>
        </Body>
      </ClassMethodDecl>
      <ClassMethodDecl Name="dispose" Scope="Public">
        <Parameters />
        <Body>
          <MethodCall FunctionName="close" Optional="False">
            <Target>
              <PropertyRef PropertyName="connection" Optional="False">
                <Owner>
                  <SelfReference />
                </Owner>
              </PropertyRef>
            </Target>
            <Arguments />
          </MethodCall>
        </Body>
      </ClassMethodDecl>
    </Methods>
    <Events />
  </ClassDefinition>
  <IfElse>
    <Condition>
      <BinaryExpression Operator="Identical">
        <LeftOperand>
          <VariableRef Name="__name" />
        </LeftOperand>
        <RightOperand>
          <Literal Type="string" Value="main" />
        </RightOperand>
      </BinaryExpression>
    </Condition>
    <PositiveAction>
      <Block>
        <Assignment Operator="None">
          <LeftOperand>
            <VariableRef Name="names" />
          </LeftOperand>
          <RightOperand>
            <ListInitializer>
              <Items>
                <ListInitializer>
                  <Items>
                    <Literal Type="string" Value="John Doe" />
                  </Items>
                </ListInitializer>
                <ListInitializer>
                  <Items>
                    <Literal Type="string" Value="Ben Harper" />
                  </Items>
                </ListInitializer>
                <ListInitializer>
                  <Items>
                    <Literal Type="string" Value="Mike Johnson" />
                  </Items>
                </ListInitializer>
                <ListInitializer>
                  <Items>
                    <Literal Type="string" Value="Ed Simmons" />
                  </Items>
                </ListInitializer>
                <ListInitializer>
                  <Items>
                    <Literal Type="string" Value="Jim Fortey" />
                  </Items>
                </ListInitializer>
              </Items>
            </ListInitializer>
          </RightOperand>
        </Assignment>
        <FunctionDecl Name="readint">
          <Parameters>
            <ParameterDecl Name="prompt" ByRef="False" VaArgs="False" />
            <ParameterDecl Name="min" ByRef="False" VaArgs="False" />
            <ParameterDecl Name="max" ByRef="False" VaArgs="False" />
            <ParameterDecl Name="default" ByRef="False" VaArgs="False" />
          </Parameters>
          <Body>
            <Assignment Operator="None">
              <LeftOperand>
                <VariableRef Name="ans" />
              </LeftOperand>
              <RightOperand>
                <FunctionCall FunctionName="readln">
                  <Arguments>
                    <VariableRef Name="prompt" />
                  </Arguments>
                </FunctionCall>
              </RightOperand>
            </Assignment>
            <TryCatchFinally ExceptionName="ex">
              <TryBlock>
                <Assignment Operator="None">
                  <LeftOperand>
                    <VariableRef Name="val" />
                  </LeftOperand>
                  <RightOperand>
                    <Conversion TypeName="int">
                      <Expression>
                        <VariableRef Name="ans" />
                      </Expression>
                    </Conversion>
                  </RightOperand>
                </Assignment>
                <IfElse>
                  <Condition>
                    <BinaryExpression Operator="AndAlso">
                      <LeftOperand>
                        <BinaryExpression Operator="LessThanOrEqual">
                          <LeftOperand>
                            <VariableRef Name="min" />
                          </LeftOperand>
                          <RightOperand>
                            <VariableRef Name="val" />
                          </RightOperand>
                        </BinaryExpression>
                      </LeftOperand>
                      <RightOperand>
                        <BinaryExpression Operator="LessThanOrEqual">
                          <LeftOperand>
                            <VariableRef Name="val" />
                          </LeftOperand>
                          <RightOperand>
                            <VariableRef Name="max" />
                          </RightOperand>
                        </BinaryExpression>
                      </RightOperand>
                    </BinaryExpression>
                  </Condition>
                  <PositiveAction>
                    <Return>
                      <VariableRef Name="val" />
                    </Return>
                  </PositiveAction>
                </IfElse>
                <Return>
                  <VariableRef Name="default" />
                </Return>
              </TryBlock>
              <CatchBlock>
                <Return>
                  <VariableRef Name="default" />
                </Return>
              </CatchBlock>
            </TryCatchFinally>
          </Body>
        </FunctionDecl>
        <FunctionDecl Name="access_test">
          <Parameters />
          <Body>
            <ConstantDecl>
              <PropertyInitializer Name="DB_PATH">
                <Value>
                  <Literal Type="string" Value="../../Examples/data/nwind.mdb" />
                </Value>
              </PropertyInitializer>
            </ConstantDecl>
            <ConstantDecl>
              <PropertyInitializer Name="OLEDB_CONNECTION_STRING">
                <Value>
                  <BinaryExpression Operator="Plus">
                    <LeftOperand>
                      <Literal Type="string" Value="Provider=MicroSoft.Ace.OleDb.12.0;Data Source=" />
                    </LeftOperand>
                    <RightOperand>
                      <VariableRef Name="DB_PATH" />
                    </RightOperand>
                  </BinaryExpression>
                </Value>
              </PropertyInitializer>
            </ConstantDecl>
            <ConstantDecl>
              <PropertyInitializer Name="ODBC_CONNECTION_STRING">
                <Value>
                  <BinaryExpression Operator="Plus">
                    <LeftOperand>
                      <Literal Type="string" Value="Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=" />
                    </LeftOperand>
                    <RightOperand>
                      <VariableRef Name="DB_PATH" />
                    </RightOperand>
                  </BinaryExpression>
                </Value>
              </PropertyInitializer>
            </ConstantDecl>
            <Assignment Operator="None">
              <LeftOperand>
                <VariableRef Name="driver" />
              </LeftOperand>
              <RightOperand>
                <FunctionCall FunctionName="readint">
                  <Arguments>
                    <Literal Type="string" Value="Which driver to use? (0: OLE DB, 1: ODBC) " />
                    <Literal Type="int" Value="0" />
                    <Literal Type="int" Value="1" />
                    <Literal Type="int" Value="0" />
                  </Arguments>
                </FunctionCall>
              </RightOperand>
            </Assignment>
            <FunctionCall FunctionName="println">
              <Arguments>
                <Literal Type="string" Value="Testing MS Access with connection string: {0}" />
                <TernaryExpression>
                  <Test>
                    <BinaryExpression Operator="Equal">
                      <LeftOperand>
                        <VariableRef Name="driver" />
                      </LeftOperand>
                      <RightOperand>
                        <Literal Type="int" Value="0" />
                      </RightOperand>
                    </BinaryExpression>
                  </Test>
                  <TruePart>
                    <VariableRef Name="OLEDB_CONNECTION_STRING" />
                  </TruePart>
                  <FalsePart>
                    <VariableRef Name="ODBC_CONNECTION_STRING" />
                  </FalsePart>
                </TernaryExpression>
              </Arguments>
            </FunctionCall>
            <FunctionCall FunctionName="println">
              <Arguments />
            </FunctionCall>
            <TryCatchFinally ExceptionName="ex">
              <TryBlock>
                <Assignment Operator="None">
                  <LeftOperand>
                    <VariableRef Name="dbo" />
                  </LeftOperand>
                  <RightOperand>
                    <TernaryExpression>
                      <Test>
                        <BinaryExpression Operator="Equal">
                          <LeftOperand>
                            <VariableRef Name="driver" />
                          </LeftOperand>
                          <RightOperand>
                            <Literal Type="int" Value="0" />
                          </RightOperand>
                        </BinaryExpression>
                      </Test>
                      <TruePart>
                        <ConstructorCall ClassName="DBO">
                          <Arguments>
                            <Literal Type="string" Value="oledb" />
                            <VariableRef Name="OLEDB_CONNECTION_STRING" />
                          </Arguments>
                        </ConstructorCall>
                      </TruePart>
                      <FalsePart>
                        <ConstructorCall ClassName="DBO">
                          <Arguments>
                            <Literal Type="string" Value="odbc" />
                            <VariableRef Name="ODBC_CONNECTION_STRING" />
                          </Arguments>
                        </ConstructorCall>
                      </FalsePart>
                    </TernaryExpression>
                  </RightOperand>
                </Assignment>
                <MethodCall FunctionName="exec" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments>
                    <Literal Type="string" Value="create table test (id counter, name text(50) not null, primary key (id))" />
                  </Arguments>
                </MethodCall>
                <MethodCall FunctionName="execMany" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments>
                    <Literal Type="string" Value="insert into test (name) values (?)" />
                    <ListInitializer>
                      <Items>
                        <ObjectInitializer>
                          <PropertyInitializer Name="name">
                            <Value>
                              <Literal Type="string" Value="name" />
                            </Value>
                          </PropertyInitializer>
                          <PropertyInitializer Name="dbType">
                            <Value>
                              <Literal Type="string" Value="String" />
                            </Value>
                          </PropertyInitializer>
                          <PropertyInitializer Name="size">
                            <Value>
                              <Literal Type="int" Value="12" />
                            </Value>
                          </PropertyInitializer>
                        </ObjectInitializer>
                      </Items>
                    </ListInitializer>
                    <VariableRef Name="names" />
                  </Arguments>
                </MethodCall>
                <Assignment Operator="None">
                  <LeftOperand>
                    <VariableRef Name="cmd" />
                  </LeftOperand>
                  <RightOperand>
                    <MethodCall FunctionName="addParam" Optional="False">
                      <Target>
                        <MethodCall FunctionName="prepare" Optional="False">
                          <Target>
                            <VariableRef Name="dbo" />
                          </Target>
                          <Arguments>
                            <Literal Type="string" Value="delete from test where id = ?" />
                          </Arguments>
                        </MethodCall>
                      </Target>
                      <Arguments>
                        <ObjectInitializer>
                          <PropertyInitializer Name="name">
                            <Value>
                              <Literal Type="string" Value="id" />
                            </Value>
                          </PropertyInitializer>
                          <PropertyInitializer Name="dbType">
                            <Value>
                              <Literal Type="string" Value="Int32" />
                            </Value>
                          </PropertyInitializer>
                        </ObjectInitializer>
                      </Arguments>
                    </MethodCall>
                  </RightOperand>
                </Assignment>
                <MethodCall FunctionName="beginTransaction" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments />
                </MethodCall>
                <MethodCall FunctionName="exec" Optional="False">
                  <Target>
                    <MethodCall FunctionName="setParam" Optional="False">
                      <Target>
                        <VariableRef Name="cmd" />
                      </Target>
                      <Arguments>
                        <Literal Type="string" Value="id" />
                        <Literal Type="int" Value="3" />
                      </Arguments>
                    </MethodCall>
                  </Target>
                  <Arguments />
                </MethodCall>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <Literal Type="string" Value="whithin transaction:" />
                  </Arguments>
                </FunctionCall>
                <MethodCall FunctionName="eachRow" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments>
                    <Literal Type="string" Value="select * from test" />
                    <InlineFunction>
                      <Parameters>
                        <ParameterDecl Name="t" ByRef="False" VaArgs="False" />
                      </Parameters>
                      <Body>
                        <Return>
                          <FunctionCall FunctionName="println">
                            <Arguments>
                              <FormatStringExpression>
                                <Segments>
                                  <PropertyRef PropertyName="id" Optional="False">
                                    <Owner>
                                      <VariableRef Name="t" />
                                    </Owner>
                                  </PropertyRef>
                                  <Literal Type="string" Value=" : " />
                                  <PropertyRef PropertyName="name" Optional="False">
                                    <Owner>
                                      <VariableRef Name="t" />
                                    </Owner>
                                  </PropertyRef>
                                </Segments>
                              </FormatStringExpression>
                            </Arguments>
                          </FunctionCall>
                        </Return>
                      </Body>
                    </InlineFunction>
                  </Arguments>
                </MethodCall>
                <MethodCall FunctionName="rollback" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments />
                </MethodCall>
                <FunctionCall FunctionName="println">
                  <Arguments />
                </FunctionCall>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <Literal Type="string" Value="after rolling back transaction:" />
                  </Arguments>
                </FunctionCall>
                <Assignment Operator="None">
                  <LeftOperand>
                    <VariableRef Name="cmd" />
                  </LeftOperand>
                  <RightOperand>
                    <MethodCall FunctionName="prepare" Optional="False">
                      <Target>
                        <VariableRef Name="dbo" />
                      </Target>
                      <Arguments>
                        <Literal Type="string" Value="select * from test" />
                      </Arguments>
                    </MethodCall>
                  </RightOperand>
                </Assignment>
                <MethodCall FunctionName="eachRow" Optional="False">
                  <Target>
                    <VariableRef Name="cmd" />
                  </Target>
                  <Arguments>
                    <InlineFunction>
                      <Parameters>
                        <ParameterDecl Name="t" ByRef="False" VaArgs="False" />
                      </Parameters>
                      <Body>
                        <Return>
                          <FunctionCall FunctionName="println">
                            <Arguments>
                              <Literal Type="string" Value="{0} : {1}" />
                              <VariableRef Name="t" />
                            </Arguments>
                          </FunctionCall>
                        </Return>
                      </Body>
                    </InlineFunction>
                    <VariableRef Name="to_list" />
                  </Arguments>
                </MethodCall>
                <FunctionCall FunctionName="println">
                  <Arguments />
                </FunctionCall>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <Literal Type="string" Value="name of item #5: {0}" />
                    <MethodCall FunctionName="find" Optional="False">
                      <Target>
                        <VariableRef Name="dbo" />
                      </Target>
                      <Arguments>
                        <Literal Type="string" Value="test" />
                        <Literal Type="string" Value="name" />
                        <Literal Type="string" Value="id = 5" />
                      </Arguments>
                    </MethodCall>
                  </Arguments>
                </FunctionCall>
                <FunctionCall FunctionName="println">
                  <Arguments />
                </FunctionCall>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <Literal Type="string" Value="10 first customers in the database:" />
                  </Arguments>
                </FunctionCall>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <BinaryExpression Operator="Times">
                      <LeftOperand>
                        <Literal Type="string" Value="-" />
                      </LeftOperand>
                      <RightOperand>
                        <Literal Type="int" Value="35" />
                      </RightOperand>
                    </BinaryExpression>
                  </Arguments>
                </FunctionCall>
                <Assignment Operator="None">
                  <LeftOperand>
                    <VariableRef Name="ds" />
                  </LeftOperand>
                  <RightOperand>
                    <MethodCall FunctionName="getDataSet" Optional="False">
                      <Target>
                        <VariableRef Name="dbo" />
                      </Target>
                      <Arguments>
                        <Literal Type="string" Value="Customers" />
                        <Literal Type="string" Value="select top 10 * from customers" />
                      </Arguments>
                    </MethodCall>
                  </RightOperand>
                </Assignment>
                <ForEachLoop ValueName="row">
                  <Enumerated>
                    <PropertyRef PropertyName="Rows" Optional="False">
                      <Owner>
                        <ItemRef>
                          <Owner>
                            <PropertyRef PropertyName="Tables" Optional="False">
                              <Owner>
                                <VariableRef Name="ds" />
                              </Owner>
                            </PropertyRef>
                          </Owner>
                          <Index>
                            <Literal Type="int" Value="0" />
                          </Index>
                        </ItemRef>
                      </Owner>
                    </PropertyRef>
                  </Enumerated>
                  <Action>
                    <FunctionCall FunctionName="println">
                      <Arguments>
                        <FormatStringExpression>
                          <Segments>
                            <ItemRef>
                              <Owner>
                                <VariableRef Name="row" />
                              </Owner>
                              <Index>
                                <Literal Type="string" Value="CustomerID" />
                              </Index>
                            </ItemRef>
                            <Literal Type="string" Value=" " />
                            <ItemRef>
                              <Owner>
                                <VariableRef Name="row" />
                              </Owner>
                              <Index>
                                <Literal Type="string" Value="CompanyName" />
                              </Index>
                            </ItemRef>
                          </Segments>
                        </FormatStringExpression>
                      </Arguments>
                    </FunctionCall>
                  </Action>
                </ForEachLoop>
                <MethodCall FunctionName="Dispose" Optional="False">
                  <Target>
                    <VariableRef Name="ds" />
                  </Target>
                  <Arguments />
                </MethodCall>
              </TryBlock>
              <CatchBlock>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <BinaryExpression Operator="Plus">
                      <LeftOperand>
                        <BinaryExpression Operator="Plus">
                          <LeftOperand>
                            <PropertyRef PropertyName="name" Optional="False">
                              <Owner>
                                <VariableRef Name="ex" />
                              </Owner>
                            </PropertyRef>
                          </LeftOperand>
                          <RightOperand>
                            <Literal Type="string" Value=" : " />
                          </RightOperand>
                        </BinaryExpression>
                      </LeftOperand>
                      <RightOperand>
                        <PropertyRef PropertyName="message" Optional="False">
                          <Owner>
                            <VariableRef Name="ex" />
                          </Owner>
                        </PropertyRef>
                      </RightOperand>
                    </BinaryExpression>
                  </Arguments>
                </FunctionCall>
              </CatchBlock>
              <FinallyBlock>
                <TryCatchFinally ExceptionName="ex1">
                  <TryBlock>
                    <IfElse>
                      <Condition>
                        <BinaryExpression Operator="NotEqual">
                          <LeftOperand>
                            <VariableRef Name="driver" />
                          </LeftOperand>
                          <RightOperand>
                            <Literal Type="int" Value="0" />
                          </RightOperand>
                        </BinaryExpression>
                      </Condition>
                      <PositiveAction>
                        <MethodCall FunctionName="reconnect" Optional="False">
                          <Target>
                            <VariableRef Name="dbo" />
                          </Target>
                          <Arguments />
                        </MethodCall>
                      </PositiveAction>
                    </IfElse>
                    <MethodCall FunctionName="exec" Optional="False">
                      <Target>
                        <VariableRef Name="dbo" />
                      </Target>
                      <Arguments>
                        <Literal Type="string" Value="drop table test" />
                      </Arguments>
                    </MethodCall>
                  </TryBlock>
                  <CatchBlock />
                  <FinallyBlock>
                    <TryCatchFinally ExceptionName="ex2">
                      <TryBlock>
                        <MethodCall FunctionName="dispose" Optional="False">
                          <Target>
                            <VariableRef Name="dbo" />
                          </Target>
                          <Arguments />
                        </MethodCall>
                      </TryBlock>
                      <CatchBlock />
                    </TryCatchFinally>
                  </FinallyBlock>
                </TryCatchFinally>
              </FinallyBlock>
            </TryCatchFinally>
          </Body>
        </FunctionDecl>
        <FunctionDecl Name="mssql_test">
          <Parameters />
          <Body>
            <ConstantDecl>
              <PropertyInitializer Name="CONNECTION_STRING">
                <Value>
                  <Literal Type="string" Value="Data Source=(local);Initial Catalog=Northwind;Integrated Security=yes" />
                </Value>
              </PropertyInitializer>
            </ConstantDecl>
            <FunctionCall FunctionName="println">
              <Arguments>
                <BinaryExpression Operator="Plus">
                  <LeftOperand>
                    <Literal Type="string" Value="Testing MS SQL Server with connection string: " />
                  </LeftOperand>
                  <RightOperand>
                    <VariableRef Name="CONNECTION_STRING" />
                  </RightOperand>
                </BinaryExpression>
              </Arguments>
            </FunctionCall>
            <FunctionCall FunctionName="println">
              <Arguments />
            </FunctionCall>
            <TryCatchFinally ExceptionName="ex">
              <TryBlock>
                <Assignment Operator="None">
                  <LeftOperand>
                    <VariableRef Name="dbo" />
                  </LeftOperand>
                  <RightOperand>
                    <ConstructorCall ClassName="DBO">
                      <Arguments>
                        <Literal Type="string" Value="mssql" />
                        <VariableRef Name="CONNECTION_STRING" />
                      </Arguments>
                    </ConstructorCall>
                  </RightOperand>
                </Assignment>
                <MethodCall FunctionName="exec" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments>
                    <Literal Type="string" Value="create table test (id int not null identity(1, 1), name varchar(50) not null, primary key (id))" />
                  </Arguments>
                </MethodCall>
                <MethodCall FunctionName="execMany" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments>
                    <Literal Type="string" Value="insert into test values (@name)" />
                    <ListInitializer>
                      <Items>
                        <ObjectInitializer>
                          <PropertyInitializer Name="name">
                            <Value>
                              <Literal Type="string" Value="name" />
                            </Value>
                          </PropertyInitializer>
                          <PropertyInitializer Name="dbType">
                            <Value>
                              <Literal Type="string" Value="String" />
                            </Value>
                          </PropertyInitializer>
                          <PropertyInitializer Name="size">
                            <Value>
                              <Literal Type="int" Value="12" />
                            </Value>
                          </PropertyInitializer>
                        </ObjectInitializer>
                      </Items>
                    </ListInitializer>
                    <VariableRef Name="names" />
                  </Arguments>
                </MethodCall>
                <Assignment Operator="None">
                  <LeftOperand>
                    <VariableRef Name="cmd" />
                  </LeftOperand>
                  <RightOperand>
                    <MethodCall FunctionName="addParam" Optional="False">
                      <Target>
                        <MethodCall FunctionName="prepare" Optional="False">
                          <Target>
                            <VariableRef Name="dbo" />
                          </Target>
                          <Arguments>
                            <Literal Type="string" Value="delete from test where id = @id" />
                          </Arguments>
                        </MethodCall>
                      </Target>
                      <Arguments>
                        <ObjectInitializer>
                          <PropertyInitializer Name="name">
                            <Value>
                              <Literal Type="string" Value="id" />
                            </Value>
                          </PropertyInitializer>
                          <PropertyInitializer Name="dbType">
                            <Value>
                              <Literal Type="string" Value="Int32" />
                            </Value>
                          </PropertyInitializer>
                        </ObjectInitializer>
                      </Arguments>
                    </MethodCall>
                  </RightOperand>
                </Assignment>
                <MethodCall FunctionName="beginTransaction" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments />
                </MethodCall>
                <MethodCall FunctionName="exec" Optional="False">
                  <Target>
                    <MethodCall FunctionName="setParam" Optional="False">
                      <Target>
                        <VariableRef Name="cmd" />
                      </Target>
                      <Arguments>
                        <Literal Type="string" Value="id" />
                        <Literal Type="int" Value="3" />
                      </Arguments>
                    </MethodCall>
                  </Target>
                  <Arguments />
                </MethodCall>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <Literal Type="string" Value="whithin transaction:" />
                  </Arguments>
                </FunctionCall>
                <MethodCall FunctionName="eachRow" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments>
                    <Literal Type="string" Value="select * from test" />
                    <InlineFunction>
                      <Parameters>
                        <ParameterDecl Name="t" ByRef="False" VaArgs="False" />
                      </Parameters>
                      <Body>
                        <Return>
                          <FunctionCall FunctionName="println">
                            <Arguments>
                              <Literal Type="string" Value="{0} : {1}" />
                              <PropertyRef PropertyName="id" Optional="False">
                                <Owner>
                                  <VariableRef Name="t" />
                                </Owner>
                              </PropertyRef>
                              <PropertyRef PropertyName="name" Optional="False">
                                <Owner>
                                  <VariableRef Name="t" />
                                </Owner>
                              </PropertyRef>
                            </Arguments>
                          </FunctionCall>
                        </Return>
                      </Body>
                    </InlineFunction>
                  </Arguments>
                </MethodCall>
                <MethodCall FunctionName="rollback" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments />
                </MethodCall>
                <FunctionCall FunctionName="println">
                  <Arguments />
                </FunctionCall>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <Literal Type="string" Value="after rolling back transaction:" />
                  </Arguments>
                </FunctionCall>
                <Assignment Operator="None">
                  <LeftOperand>
                    <VariableRef Name="cmd" />
                  </LeftOperand>
                  <RightOperand>
                    <MethodCall FunctionName="prepare" Optional="False">
                      <Target>
                        <VariableRef Name="dbo" />
                      </Target>
                      <Arguments>
                        <Literal Type="string" Value="select * from test" />
                      </Arguments>
                    </MethodCall>
                  </RightOperand>
                </Assignment>
                <MethodCall FunctionName="eachRow" Optional="False">
                  <Target>
                    <VariableRef Name="cmd" />
                  </Target>
                  <Arguments>
                    <InlineFunction>
                      <Parameters>
                        <ParameterDecl Name="t" ByRef="False" VaArgs="False" />
                      </Parameters>
                      <Body>
                        <Return>
                          <FunctionCall FunctionName="println">
                            <Arguments>
                              <Literal Type="string" Value="{0} : {1}" />
                              <VariableRef Name="t" />
                            </Arguments>
                          </FunctionCall>
                        </Return>
                      </Body>
                    </InlineFunction>
                    <VariableRef Name="to_list" />
                  </Arguments>
                </MethodCall>
                <FunctionCall FunctionName="println">
                  <Arguments />
                </FunctionCall>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <Literal Type="string" Value="name of item #5: {0}" />
                    <MethodCall FunctionName="find" Optional="False">
                      <Target>
                        <VariableRef Name="dbo" />
                      </Target>
                      <Arguments>
                        <Literal Type="string" Value="test" />
                        <Literal Type="string" Value="name" />
                        <Literal Type="string" Value="id = 5" />
                      </Arguments>
                    </MethodCall>
                  </Arguments>
                </FunctionCall>
                <FunctionCall FunctionName="println">
                  <Arguments />
                </FunctionCall>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <Literal Type="string" Value="10 first products in the database:" />
                  </Arguments>
                </FunctionCall>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <BinaryExpression Operator="Times">
                      <LeftOperand>
                        <Literal Type="string" Value="-" />
                      </LeftOperand>
                      <RightOperand>
                        <Literal Type="int" Value="34" />
                      </RightOperand>
                    </BinaryExpression>
                  </Arguments>
                </FunctionCall>
                <Assignment Operator="None">
                  <LeftOperand>
                    <VariableRef Name="ds" />
                  </LeftOperand>
                  <RightOperand>
                    <MethodCall FunctionName="getDataSet" Optional="False">
                      <Target>
                        <VariableRef Name="dbo" />
                      </Target>
                      <Arguments>
                        <Literal Type="string" Value="Products" />
                        <Literal Type="string" Value="select top 10 * from products" />
                      </Arguments>
                    </MethodCall>
                  </RightOperand>
                </Assignment>
                <ForEachLoop ValueName="row">
                  <Enumerated>
                    <PropertyRef PropertyName="Rows" Optional="False">
                      <Owner>
                        <ItemRef>
                          <Owner>
                            <PropertyRef PropertyName="Tables" Optional="False">
                              <Owner>
                                <VariableRef Name="ds" />
                              </Owner>
                            </PropertyRef>
                          </Owner>
                          <Index>
                            <Literal Type="int" Value="0" />
                          </Index>
                        </ItemRef>
                      </Owner>
                    </PropertyRef>
                  </Enumerated>
                  <Action>
                    <FunctionCall FunctionName="println">
                      <Arguments>
                        <Literal Type="string" Value="{0} {1}" />
                        <ItemRef>
                          <Owner>
                            <VariableRef Name="row" />
                          </Owner>
                          <Index>
                            <Literal Type="string" Value="ProductID" />
                          </Index>
                        </ItemRef>
                        <ItemRef>
                          <Owner>
                            <VariableRef Name="row" />
                          </Owner>
                          <Index>
                            <Literal Type="string" Value="ProductName" />
                          </Index>
                        </ItemRef>
                      </Arguments>
                    </FunctionCall>
                  </Action>
                </ForEachLoop>
                <MethodCall FunctionName="Dispose" Optional="False">
                  <Target>
                    <VariableRef Name="ds" />
                  </Target>
                  <Arguments />
                </MethodCall>
              </TryBlock>
              <CatchBlock>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <BinaryExpression Operator="Plus">
                      <LeftOperand>
                        <BinaryExpression Operator="Plus">
                          <LeftOperand>
                            <PropertyRef PropertyName="name" Optional="False">
                              <Owner>
                                <VariableRef Name="ex" />
                              </Owner>
                            </PropertyRef>
                          </LeftOperand>
                          <RightOperand>
                            <Literal Type="string" Value=" : " />
                          </RightOperand>
                        </BinaryExpression>
                      </LeftOperand>
                      <RightOperand>
                        <PropertyRef PropertyName="message" Optional="False">
                          <Owner>
                            <VariableRef Name="ex" />
                          </Owner>
                        </PropertyRef>
                      </RightOperand>
                    </BinaryExpression>
                  </Arguments>
                </FunctionCall>
              </CatchBlock>
              <FinallyBlock>
                <TryCatchFinally ExceptionName="ex1">
                  <TryBlock>
                    <MethodCall FunctionName="exec" Optional="False">
                      <Target>
                        <VariableRef Name="dbo" />
                      </Target>
                      <Arguments>
                        <Literal Type="string" Value="drop table test" />
                      </Arguments>
                    </MethodCall>
                  </TryBlock>
                  <CatchBlock />
                  <FinallyBlock>
                    <TryCatchFinally ExceptionName="ex2">
                      <TryBlock>
                        <MethodCall FunctionName="dispose" Optional="False">
                          <Target>
                            <VariableRef Name="dbo" />
                          </Target>
                          <Arguments />
                        </MethodCall>
                      </TryBlock>
                      <CatchBlock />
                    </TryCatchFinally>
                  </FinallyBlock>
                </TryCatchFinally>
              </FinallyBlock>
            </TryCatchFinally>
          </Body>
        </FunctionDecl>
        <FunctionDecl Name="oracle_test">
          <Parameters />
          <Body>
            <ConstantDecl>
              <PropertyInitializer Name="CONNECTION_STRING">
                <Value>
                  <Literal Type="string" Value="Data Source=localhost:1521/free;User Id=hr;Password=oracle" />
                </Value>
              </PropertyInitializer>
            </ConstantDecl>
            <FunctionCall FunctionName="println">
              <Arguments>
                <BinaryExpression Operator="Plus">
                  <LeftOperand>
                    <Literal Type="string" Value="Testing Oracle with connection string: " />
                  </LeftOperand>
                  <RightOperand>
                    <VariableRef Name="CONNECTION_STRING" />
                  </RightOperand>
                </BinaryExpression>
              </Arguments>
            </FunctionCall>
            <FunctionCall FunctionName="println">
              <Arguments />
            </FunctionCall>
            <TryCatchFinally ExceptionName="ex">
              <TryBlock>
                <Assignment Operator="None">
                  <LeftOperand>
                    <VariableRef Name="dbo" />
                  </LeftOperand>
                  <RightOperand>
                    <ConstructorCall ClassName="DBO">
                      <Arguments>
                        <Literal Type="string" Value="oracle" />
                        <VariableRef Name="CONNECTION_STRING" />
                      </Arguments>
                    </ConstructorCall>
                  </RightOperand>
                </Assignment>
                <MethodCall FunctionName="exec" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments>
                    <Literal Type="string" Value="create table test (id number(10) not null, name varchar2(50) not null, primary key (id))" />
                  </Arguments>
                </MethodCall>
                <MethodCall FunctionName="exec" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments>
                    <Literal Type="string" Value="create sequence test_seq nocache nocycle" />
                  </Arguments>
                </MethodCall>
                <MethodCall FunctionName="execMany" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments>
                    <Literal Type="string" Value="insert into test values (test_seq.nextval, :name)" />
                    <ListInitializer>
                      <Items>
                        <Literal Type="string" Value="name" />
                      </Items>
                    </ListInitializer>
                    <VariableRef Name="names" />
                  </Arguments>
                </MethodCall>
                <Assignment Operator="None">
                  <LeftOperand>
                    <VariableRef Name="cmd" />
                  </LeftOperand>
                  <RightOperand>
                    <MethodCall FunctionName="addParam" Optional="False">
                      <Target>
                        <MethodCall FunctionName="prepare" Optional="False">
                          <Target>
                            <VariableRef Name="dbo" />
                          </Target>
                          <Arguments>
                            <Literal Type="string" Value="delete from test where id = :id" />
                          </Arguments>
                        </MethodCall>
                      </Target>
                      <Arguments>
                        <ObjectInitializer>
                          <PropertyInitializer Name="name">
                            <Value>
                              <Literal Type="string" Value="id" />
                            </Value>
                          </PropertyInitializer>
                          <PropertyInitializer Name="dbType">
                            <Value>
                              <Literal Type="string" Value="Int32" />
                            </Value>
                          </PropertyInitializer>
                        </ObjectInitializer>
                      </Arguments>
                    </MethodCall>
                  </RightOperand>
                </Assignment>
                <MethodCall FunctionName="beginTransaction" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments />
                </MethodCall>
                <MethodCall FunctionName="exec" Optional="False">
                  <Target>
                    <MethodCall FunctionName="setParam" Optional="False">
                      <Target>
                        <VariableRef Name="cmd" />
                      </Target>
                      <Arguments>
                        <Literal Type="string" Value="id" />
                        <Literal Type="int" Value="3" />
                      </Arguments>
                    </MethodCall>
                  </Target>
                  <Arguments />
                </MethodCall>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <Literal Type="string" Value="whithin transaction:" />
                  </Arguments>
                </FunctionCall>
                <MethodCall FunctionName="eachRow" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments>
                    <Literal Type="string" Value="select * from test" />
                    <InlineFunction>
                      <Parameters>
                        <ParameterDecl Name="t" ByRef="False" VaArgs="False" />
                      </Parameters>
                      <Body>
                        <Return>
                          <FunctionCall FunctionName="println">
                            <Arguments>
                              <Literal Type="string" Value="{0} : {1}" />
                              <PropertyRef PropertyName="ID" Optional="False">
                                <Owner>
                                  <VariableRef Name="t" />
                                </Owner>
                              </PropertyRef>
                              <PropertyRef PropertyName="NAME" Optional="False">
                                <Owner>
                                  <VariableRef Name="t" />
                                </Owner>
                              </PropertyRef>
                            </Arguments>
                          </FunctionCall>
                        </Return>
                      </Body>
                    </InlineFunction>
                  </Arguments>
                </MethodCall>
                <MethodCall FunctionName="rollback" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments />
                </MethodCall>
                <FunctionCall FunctionName="println">
                  <Arguments />
                </FunctionCall>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <Literal Type="string" Value="after rolling back transaction:" />
                  </Arguments>
                </FunctionCall>
                <Assignment Operator="None">
                  <LeftOperand>
                    <VariableRef Name="cmd" />
                  </LeftOperand>
                  <RightOperand>
                    <MethodCall FunctionName="prepare" Optional="False">
                      <Target>
                        <VariableRef Name="dbo" />
                      </Target>
                      <Arguments>
                        <Literal Type="string" Value="test" />
                        <Literal Type="string" Value="TableDirect" />
                      </Arguments>
                    </MethodCall>
                  </RightOperand>
                </Assignment>
                <MethodCall FunctionName="eachRow" Optional="False">
                  <Target>
                    <VariableRef Name="cmd" />
                  </Target>
                  <Arguments>
                    <InlineFunction>
                      <Parameters>
                        <ParameterDecl Name="t" ByRef="False" VaArgs="False" />
                      </Parameters>
                      <Body>
                        <Return>
                          <FunctionCall FunctionName="println">
                            <Arguments>
                              <Literal Type="string" Value="{0} : {1}" />
                              <VariableRef Name="t" />
                            </Arguments>
                          </FunctionCall>
                        </Return>
                      </Body>
                    </InlineFunction>
                    <VariableRef Name="to_list" />
                  </Arguments>
                </MethodCall>
                <FunctionCall FunctionName="println">
                  <Arguments />
                </FunctionCall>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <Literal Type="string" Value="name of item #5: {0}" />
                    <MethodCall FunctionName="find" Optional="False">
                      <Target>
                        <VariableRef Name="dbo" />
                      </Target>
                      <Arguments>
                        <Literal Type="string" Value="test" />
                        <Literal Type="string" Value="name" />
                        <Literal Type="string" Value="id = 5" />
                      </Arguments>
                    </MethodCall>
                  </Arguments>
                </FunctionCall>
                <FunctionCall FunctionName="println">
                  <Arguments />
                </FunctionCall>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <Literal Type="string" Value="10 employees extracted from the database:" />
                  </Arguments>
                </FunctionCall>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <BinaryExpression Operator="Times">
                      <LeftOperand>
                        <Literal Type="string" Value="-" />
                      </LeftOperand>
                      <RightOperand>
                        <Literal Type="int" Value="41" />
                      </RightOperand>
                    </BinaryExpression>
                  </Arguments>
                </FunctionCall>
                <Assignment Operator="None">
                  <LeftOperand>
                    <VariableRef Name="ds" />
                  </LeftOperand>
                  <RightOperand>
                    <MethodCall FunctionName="getDataSet" Optional="False">
                      <Target>
                        <MethodCall FunctionName="addParam" Optional="False">
                          <Target>
                            <MethodCall FunctionName="prepare" Optional="False">
                              <Target>
                                <VariableRef Name="dbo" />
                              </Target>
                              <Arguments>
                                <Literal Type="string" Value="select * from (select e.*, rownum rn from employees e) where rn between :offset and :offset + 9" />
                              </Arguments>
                            </MethodCall>
                          </Target>
                          <Arguments>
                            <ObjectInitializer>
                              <PropertyInitializer Name="name">
                                <Value>
                                  <Literal Type="string" Value="offset" />
                                </Value>
                              </PropertyInitializer>
                              <PropertyInitializer Name="value">
                                <Value>
                                  <FunctionCall FunctionName="randint">
                                    <Arguments>
                                      <Literal Type="int" Value="1" />
                                      <Literal Type="int" Value="99" />
                                    </Arguments>
                                  </FunctionCall>
                                </Value>
                              </PropertyInitializer>
                            </ObjectInitializer>
                          </Arguments>
                        </MethodCall>
                      </Target>
                      <Arguments>
                        <Literal Type="string" Value="Employees" />
                      </Arguments>
                    </MethodCall>
                  </RightOperand>
                </Assignment>
                <ForEachLoop ValueName="row">
                  <Enumerated>
                    <PropertyRef PropertyName="Rows" Optional="False">
                      <Owner>
                        <ItemRef>
                          <Owner>
                            <PropertyRef PropertyName="Tables" Optional="False">
                              <Owner>
                                <VariableRef Name="ds" />
                              </Owner>
                            </PropertyRef>
                          </Owner>
                          <Index>
                            <Literal Type="int" Value="0" />
                          </Index>
                        </ItemRef>
                      </Owner>
                    </PropertyRef>
                  </Enumerated>
                  <Action>
                    <FunctionCall FunctionName="println">
                      <Arguments>
                        <Literal Type="string" Value="{0} {1} {2}" />
                        <ItemRef>
                          <Owner>
                            <VariableRef Name="row" />
                          </Owner>
                          <Index>
                            <Literal Type="string" Value="EMPLOYEE_ID" />
                          </Index>
                        </ItemRef>
                        <ItemRef>
                          <Owner>
                            <VariableRef Name="row" />
                          </Owner>
                          <Index>
                            <Literal Type="string" Value="FIRST_NAME" />
                          </Index>
                        </ItemRef>
                        <ItemRef>
                          <Owner>
                            <VariableRef Name="row" />
                          </Owner>
                          <Index>
                            <Literal Type="string" Value="LAST_NAME" />
                          </Index>
                        </ItemRef>
                      </Arguments>
                    </FunctionCall>
                  </Action>
                </ForEachLoop>
                <MethodCall FunctionName="Dispose" Optional="False">
                  <Target>
                    <VariableRef Name="ds" />
                  </Target>
                  <Arguments />
                </MethodCall>
              </TryBlock>
              <CatchBlock>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <BinaryExpression Operator="Plus">
                      <LeftOperand>
                        <BinaryExpression Operator="Plus">
                          <LeftOperand>
                            <PropertyRef PropertyName="name" Optional="False">
                              <Owner>
                                <VariableRef Name="ex" />
                              </Owner>
                            </PropertyRef>
                          </LeftOperand>
                          <RightOperand>
                            <Literal Type="string" Value=" : " />
                          </RightOperand>
                        </BinaryExpression>
                      </LeftOperand>
                      <RightOperand>
                        <PropertyRef PropertyName="message" Optional="False">
                          <Owner>
                            <VariableRef Name="ex" />
                          </Owner>
                        </PropertyRef>
                      </RightOperand>
                    </BinaryExpression>
                  </Arguments>
                </FunctionCall>
              </CatchBlock>
              <FinallyBlock>
                <TryCatchFinally ExceptionName="ex1">
                  <TryBlock>
                    <MethodCall FunctionName="exec" Optional="False">
                      <Target>
                        <VariableRef Name="dbo" />
                      </Target>
                      <Arguments>
                        <Literal Type="string" Value="drop table test" />
                      </Arguments>
                    </MethodCall>
                    <MethodCall FunctionName="exec" Optional="False">
                      <Target>
                        <VariableRef Name="dbo" />
                      </Target>
                      <Arguments>
                        <Literal Type="string" Value="drop sequence test_seq" />
                      </Arguments>
                    </MethodCall>
                  </TryBlock>
                  <CatchBlock />
                  <FinallyBlock>
                    <TryCatchFinally ExceptionName="ex2">
                      <TryBlock>
                        <MethodCall FunctionName="dispose" Optional="False">
                          <Target>
                            <VariableRef Name="dbo" />
                          </Target>
                          <Arguments />
                        </MethodCall>
                      </TryBlock>
                      <CatchBlock />
                    </TryCatchFinally>
                  </FinallyBlock>
                </TryCatchFinally>
              </FinallyBlock>
            </TryCatchFinally>
          </Body>
        </FunctionDecl>
        <FunctionDecl Name="mysql_test">
          <Parameters />
          <Body>
            <ConstantDecl>
              <PropertyInitializer Name="CONNECTION_STRING">
                <Value>
                  <Literal Type="string" Value="Server=localhost;User=testuser;Password=testpwd;Database=sakila" />
                </Value>
              </PropertyInitializer>
            </ConstantDecl>
            <FunctionCall FunctionName="println">
              <Arguments>
                <BinaryExpression Operator="Plus">
                  <LeftOperand>
                    <Literal Type="string" Value="Testing MySQL with connection string: " />
                  </LeftOperand>
                  <RightOperand>
                    <VariableRef Name="CONNECTION_STRING" />
                  </RightOperand>
                </BinaryExpression>
              </Arguments>
            </FunctionCall>
            <FunctionCall FunctionName="println">
              <Arguments />
            </FunctionCall>
            <TryCatchFinally ExceptionName="ex">
              <TryBlock>
                <Assignment Operator="None">
                  <LeftOperand>
                    <VariableRef Name="dbo" />
                  </LeftOperand>
                  <RightOperand>
                    <ConstructorCall ClassName="DBO">
                      <Arguments>
                        <Literal Type="string" Value="mysql" />
                        <VariableRef Name="CONNECTION_STRING" />
                      </Arguments>
                    </ConstructorCall>
                  </RightOperand>
                </Assignment>
                <MethodCall FunctionName="exec" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments>
                    <Literal Type="string" Value="create table test (id int not null auto_increment, name varchar(50) not null, primary key (id))" />
                  </Arguments>
                </MethodCall>
                <MethodCall FunctionName="execMany" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments>
                    <Literal Type="string" Value="insert into test (name) values (@name)" />
                    <ListInitializer>
                      <Items>
                        <Literal Type="string" Value="name" />
                      </Items>
                    </ListInitializer>
                    <VariableRef Name="names" />
                  </Arguments>
                </MethodCall>
                <Assignment Operator="None">
                  <LeftOperand>
                    <VariableRef Name="cmd" />
                  </LeftOperand>
                  <RightOperand>
                    <MethodCall FunctionName="addParam" Optional="False">
                      <Target>
                        <MethodCall FunctionName="prepare" Optional="False">
                          <Target>
                            <VariableRef Name="dbo" />
                          </Target>
                          <Arguments>
                            <Literal Type="string" Value="delete from test where id = @id" />
                          </Arguments>
                        </MethodCall>
                      </Target>
                      <Arguments>
                        <ObjectInitializer>
                          <PropertyInitializer Name="name">
                            <Value>
                              <Literal Type="string" Value="id" />
                            </Value>
                          </PropertyInitializer>
                          <PropertyInitializer Name="dbType">
                            <Value>
                              <Literal Type="string" Value="Int32" />
                            </Value>
                          </PropertyInitializer>
                        </ObjectInitializer>
                      </Arguments>
                    </MethodCall>
                  </RightOperand>
                </Assignment>
                <MethodCall FunctionName="beginTransaction" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments />
                </MethodCall>
                <MethodCall FunctionName="exec" Optional="False">
                  <Target>
                    <MethodCall FunctionName="setParam" Optional="False">
                      <Target>
                        <VariableRef Name="cmd" />
                      </Target>
                      <Arguments>
                        <Literal Type="string" Value="id" />
                        <Literal Type="int" Value="3" />
                      </Arguments>
                    </MethodCall>
                  </Target>
                  <Arguments />
                </MethodCall>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <Literal Type="string" Value="whithin transaction:" />
                  </Arguments>
                </FunctionCall>
                <MethodCall FunctionName="eachRow" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments>
                    <Literal Type="string" Value="select * from test" />
                    <InlineFunction>
                      <Parameters>
                        <ParameterDecl Name="t" ByRef="False" VaArgs="False" />
                      </Parameters>
                      <Body>
                        <Return>
                          <FunctionCall FunctionName="println">
                            <Arguments>
                              <Literal Type="string" Value="{0} : {1}" />
                              <PropertyRef PropertyName="id" Optional="False">
                                <Owner>
                                  <VariableRef Name="t" />
                                </Owner>
                              </PropertyRef>
                              <PropertyRef PropertyName="name" Optional="False">
                                <Owner>
                                  <VariableRef Name="t" />
                                </Owner>
                              </PropertyRef>
                            </Arguments>
                          </FunctionCall>
                        </Return>
                      </Body>
                    </InlineFunction>
                  </Arguments>
                </MethodCall>
                <MethodCall FunctionName="rollback" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments />
                </MethodCall>
                <FunctionCall FunctionName="println">
                  <Arguments />
                </FunctionCall>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <Literal Type="string" Value="after rolling back transaction:" />
                  </Arguments>
                </FunctionCall>
                <Assignment Operator="None">
                  <LeftOperand>
                    <VariableRef Name="cmd" />
                  </LeftOperand>
                  <RightOperand>
                    <MethodCall FunctionName="prepare" Optional="False">
                      <Target>
                        <VariableRef Name="dbo" />
                      </Target>
                      <Arguments>
                        <Literal Type="string" Value="test" />
                        <Literal Type="string" Value="TableDirect" />
                      </Arguments>
                    </MethodCall>
                  </RightOperand>
                </Assignment>
                <MethodCall FunctionName="eachRow" Optional="False">
                  <Target>
                    <VariableRef Name="cmd" />
                  </Target>
                  <Arguments>
                    <InlineFunction>
                      <Parameters>
                        <ParameterDecl Name="t" ByRef="False" VaArgs="False" />
                      </Parameters>
                      <Body>
                        <Return>
                          <FunctionCall FunctionName="println">
                            <Arguments>
                              <Literal Type="string" Value="{0} : {1}" />
                              <VariableRef Name="t" />
                            </Arguments>
                          </FunctionCall>
                        </Return>
                      </Body>
                    </InlineFunction>
                    <VariableRef Name="to_list" />
                  </Arguments>
                </MethodCall>
                <FunctionCall FunctionName="println">
                  <Arguments />
                </FunctionCall>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <Literal Type="string" Value="name of item #5: {0}" />
                    <MethodCall FunctionName="find" Optional="False">
                      <Target>
                        <VariableRef Name="dbo" />
                      </Target>
                      <Arguments>
                        <Literal Type="string" Value="test" />
                        <Literal Type="string" Value="name" />
                        <Literal Type="string" Value="id = 5" />
                      </Arguments>
                    </MethodCall>
                  </Arguments>
                </FunctionCall>
                <FunctionCall FunctionName="println">
                  <Arguments />
                </FunctionCall>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <Literal Type="string" Value="10 first actors in the database:" />
                  </Arguments>
                </FunctionCall>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <BinaryExpression Operator="Times">
                      <LeftOperand>
                        <Literal Type="string" Value="-" />
                      </LeftOperand>
                      <RightOperand>
                        <Literal Type="int" Value="32" />
                      </RightOperand>
                    </BinaryExpression>
                  </Arguments>
                </FunctionCall>
                <Assignment Operator="None">
                  <LeftOperand>
                    <VariableRef Name="ds" />
                  </LeftOperand>
                  <RightOperand>
                    <MethodCall FunctionName="getDataSet" Optional="False">
                      <Target>
                        <VariableRef Name="dbo" />
                      </Target>
                      <Arguments>
                        <Literal Type="string" Value="Actors" />
                        <Literal Type="string" Value="select * from actor limit 10" />
                      </Arguments>
                    </MethodCall>
                  </RightOperand>
                </Assignment>
                <ForEachLoop ValueName="row">
                  <Enumerated>
                    <PropertyRef PropertyName="Rows" Optional="False">
                      <Owner>
                        <ItemRef>
                          <Owner>
                            <PropertyRef PropertyName="Tables" Optional="False">
                              <Owner>
                                <VariableRef Name="ds" />
                              </Owner>
                            </PropertyRef>
                          </Owner>
                          <Index>
                            <Literal Type="int" Value="0" />
                          </Index>
                        </ItemRef>
                      </Owner>
                    </PropertyRef>
                  </Enumerated>
                  <Action>
                    <FunctionCall FunctionName="println">
                      <Arguments>
                        <Literal Type="string" Value="{0,2} {1} {2}" />
                        <ItemRef>
                          <Owner>
                            <VariableRef Name="row" />
                          </Owner>
                          <Index>
                            <Literal Type="string" Value="actor_id" />
                          </Index>
                        </ItemRef>
                        <ItemRef>
                          <Owner>
                            <VariableRef Name="row" />
                          </Owner>
                          <Index>
                            <Literal Type="string" Value="first_name" />
                          </Index>
                        </ItemRef>
                        <ItemRef>
                          <Owner>
                            <VariableRef Name="row" />
                          </Owner>
                          <Index>
                            <Literal Type="string" Value="last_name" />
                          </Index>
                        </ItemRef>
                      </Arguments>
                    </FunctionCall>
                  </Action>
                </ForEachLoop>
                <MethodCall FunctionName="Dispose" Optional="False">
                  <Target>
                    <VariableRef Name="ds" />
                  </Target>
                  <Arguments />
                </MethodCall>
              </TryBlock>
              <CatchBlock>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <BinaryExpression Operator="Plus">
                      <LeftOperand>
                        <BinaryExpression Operator="Plus">
                          <LeftOperand>
                            <PropertyRef PropertyName="name" Optional="False">
                              <Owner>
                                <VariableRef Name="ex" />
                              </Owner>
                            </PropertyRef>
                          </LeftOperand>
                          <RightOperand>
                            <Literal Type="string" Value=" : " />
                          </RightOperand>
                        </BinaryExpression>
                      </LeftOperand>
                      <RightOperand>
                        <PropertyRef PropertyName="message" Optional="False">
                          <Owner>
                            <VariableRef Name="ex" />
                          </Owner>
                        </PropertyRef>
                      </RightOperand>
                    </BinaryExpression>
                  </Arguments>
                </FunctionCall>
              </CatchBlock>
              <FinallyBlock>
                <TryCatchFinally ExceptionName="ex1">
                  <TryBlock>
                    <MethodCall FunctionName="exec" Optional="False">
                      <Target>
                        <VariableRef Name="dbo" />
                      </Target>
                      <Arguments>
                        <Literal Type="string" Value="drop table test" />
                      </Arguments>
                    </MethodCall>
                  </TryBlock>
                  <CatchBlock />
                  <FinallyBlock>
                    <TryCatchFinally ExceptionName="ex2">
                      <TryBlock>
                        <MethodCall FunctionName="dispose" Optional="False">
                          <Target>
                            <VariableRef Name="dbo" />
                          </Target>
                          <Arguments />
                        </MethodCall>
                      </TryBlock>
                      <CatchBlock />
                    </TryCatchFinally>
                  </FinallyBlock>
                </TryCatchFinally>
              </FinallyBlock>
            </TryCatchFinally>
          </Body>
        </FunctionDecl>
        <FunctionDecl Name="postgres_test">
          <Parameters />
          <Body>
            <ConstantDecl>
              <PropertyInitializer Name="CONNECTION_STRING">
                <Value>
                  <Literal Type="string" Value="Server=localhost;User=pagila_user;Password=pagilanator;Database=pagila" />
                </Value>
              </PropertyInitializer>
            </ConstantDecl>
            <FunctionCall FunctionName="println">
              <Arguments>
                <BinaryExpression Operator="Plus">
                  <LeftOperand>
                    <Literal Type="string" Value="Testing PostgreSQL with connection string: " />
                  </LeftOperand>
                  <RightOperand>
                    <VariableRef Name="CONNECTION_STRING" />
                  </RightOperand>
                </BinaryExpression>
              </Arguments>
            </FunctionCall>
            <FunctionCall FunctionName="println">
              <Arguments />
            </FunctionCall>
            <TryCatchFinally ExceptionName="ex">
              <TryBlock>
                <Assignment Operator="None">
                  <LeftOperand>
                    <VariableRef Name="dbo" />
                  </LeftOperand>
                  <RightOperand>
                    <ConstructorCall ClassName="DBO">
                      <Arguments>
                        <Literal Type="string" Value="pgsql" />
                        <VariableRef Name="CONNECTION_STRING" />
                      </Arguments>
                    </ConstructorCall>
                  </RightOperand>
                </Assignment>
                <MethodCall FunctionName="exec" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments>
                    <Literal Type="string" Value="create table test (id serial not null, name character varying(50) not null, primary key (id))" />
                  </Arguments>
                </MethodCall>
                <MethodCall FunctionName="execMany" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments>
                    <Literal Type="string" Value="insert into test (name) values (:name)" />
                    <ListInitializer>
                      <Items>
                        <Literal Type="string" Value="name" />
                      </Items>
                    </ListInitializer>
                    <VariableRef Name="names" />
                  </Arguments>
                </MethodCall>
                <Assignment Operator="None">
                  <LeftOperand>
                    <VariableRef Name="cmd" />
                  </LeftOperand>
                  <RightOperand>
                    <MethodCall FunctionName="addParam" Optional="False">
                      <Target>
                        <MethodCall FunctionName="prepare" Optional="False">
                          <Target>
                            <VariableRef Name="dbo" />
                          </Target>
                          <Arguments>
                            <Literal Type="string" Value="delete from test where id = :id" />
                          </Arguments>
                        </MethodCall>
                      </Target>
                      <Arguments>
                        <ObjectInitializer>
                          <PropertyInitializer Name="name">
                            <Value>
                              <Literal Type="string" Value="id" />
                            </Value>
                          </PropertyInitializer>
                          <PropertyInitializer Name="dbType">
                            <Value>
                              <Literal Type="string" Value="Int32" />
                            </Value>
                          </PropertyInitializer>
                        </ObjectInitializer>
                      </Arguments>
                    </MethodCall>
                  </RightOperand>
                </Assignment>
                <MethodCall FunctionName="beginTransaction" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments />
                </MethodCall>
                <MethodCall FunctionName="exec" Optional="False">
                  <Target>
                    <MethodCall FunctionName="setParam" Optional="False">
                      <Target>
                        <VariableRef Name="cmd" />
                      </Target>
                      <Arguments>
                        <Literal Type="string" Value="id" />
                        <Literal Type="int" Value="3" />
                      </Arguments>
                    </MethodCall>
                  </Target>
                  <Arguments />
                </MethodCall>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <Literal Type="string" Value="whithin transaction:" />
                  </Arguments>
                </FunctionCall>
                <MethodCall FunctionName="eachRow" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments>
                    <Literal Type="string" Value="select * from test" />
                    <InlineFunction>
                      <Parameters>
                        <ParameterDecl Name="t" ByRef="False" VaArgs="False" />
                      </Parameters>
                      <Body>
                        <Return>
                          <FunctionCall FunctionName="println">
                            <Arguments>
                              <Literal Type="string" Value="{0} : {1}" />
                              <PropertyRef PropertyName="id" Optional="False">
                                <Owner>
                                  <VariableRef Name="t" />
                                </Owner>
                              </PropertyRef>
                              <PropertyRef PropertyName="name" Optional="False">
                                <Owner>
                                  <VariableRef Name="t" />
                                </Owner>
                              </PropertyRef>
                            </Arguments>
                          </FunctionCall>
                        </Return>
                      </Body>
                    </InlineFunction>
                  </Arguments>
                </MethodCall>
                <MethodCall FunctionName="rollback" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments />
                </MethodCall>
                <FunctionCall FunctionName="println">
                  <Arguments />
                </FunctionCall>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <Literal Type="string" Value="after rolling back transaction:" />
                  </Arguments>
                </FunctionCall>
                <Assignment Operator="None">
                  <LeftOperand>
                    <VariableRef Name="cmd" />
                  </LeftOperand>
                  <RightOperand>
                    <MethodCall FunctionName="prepare" Optional="False">
                      <Target>
                        <VariableRef Name="dbo" />
                      </Target>
                      <Arguments>
                        <Literal Type="string" Value="test" />
                        <Literal Type="string" Value="TableDirect" />
                      </Arguments>
                    </MethodCall>
                  </RightOperand>
                </Assignment>
                <MethodCall FunctionName="eachRow" Optional="False">
                  <Target>
                    <VariableRef Name="cmd" />
                  </Target>
                  <Arguments>
                    <InlineFunction>
                      <Parameters>
                        <ParameterDecl Name="t" ByRef="False" VaArgs="False" />
                      </Parameters>
                      <Body>
                        <Return>
                          <FunctionCall FunctionName="println">
                            <Arguments>
                              <Literal Type="string" Value="{0} : {1}" />
                              <VariableRef Name="t" />
                            </Arguments>
                          </FunctionCall>
                        </Return>
                      </Body>
                    </InlineFunction>
                    <VariableRef Name="to_list" />
                  </Arguments>
                </MethodCall>
                <FunctionCall FunctionName="println">
                  <Arguments />
                </FunctionCall>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <Literal Type="string" Value="name of item #5: {0}" />
                    <MethodCall FunctionName="find" Optional="False">
                      <Target>
                        <VariableRef Name="dbo" />
                      </Target>
                      <Arguments>
                        <Literal Type="string" Value="test" />
                        <Literal Type="string" Value="name" />
                        <Literal Type="string" Value="id = 5" />
                      </Arguments>
                    </MethodCall>
                  </Arguments>
                </FunctionCall>
                <FunctionCall FunctionName="println">
                  <Arguments />
                </FunctionCall>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <Literal Type="string" Value="10 films extracted from the database:" />
                  </Arguments>
                </FunctionCall>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <BinaryExpression Operator="Times">
                      <LeftOperand>
                        <Literal Type="string" Value="-" />
                      </LeftOperand>
                      <RightOperand>
                        <Literal Type="int" Value="37" />
                      </RightOperand>
                    </BinaryExpression>
                  </Arguments>
                </FunctionCall>
                <Assignment Operator="None">
                  <LeftOperand>
                    <VariableRef Name="ds" />
                  </LeftOperand>
                  <RightOperand>
                    <MethodCall FunctionName="getDataSet" Optional="False">
                      <Target>
                        <MethodCall FunctionName="addParam" Optional="False">
                          <Target>
                            <MethodCall FunctionName="prepare" Optional="False">
                              <Target>
                                <VariableRef Name="dbo" />
                              </Target>
                              <Arguments>
                                <Literal Type="string" Value="select film_id, title, release_year from film limit 10 offset :offset" />
                              </Arguments>
                            </MethodCall>
                          </Target>
                          <Arguments>
                            <MapInitializer>
                              <MapItemInitializer />
                              <MapItemInitializer />
                            </MapInitializer>
                            <Key>
                              <Literal Type="string" Value="name" />
                            </Key>
                            <Value>
                              <Literal Type="string" Value="offset" />
                            </Value>
                            <Key>
                              <Literal Type="string" Value="value" />
                            </Key>
                            <Value>
                              <FunctionCall FunctionName="randint">
                                <Arguments>
                                  <Literal Type="int" Value="992" />
                                </Arguments>
                              </FunctionCall>
                            </Value>
                          </Arguments>
                        </MethodCall>
                      </Target>
                      <Arguments>
                        <Literal Type="string" Value="Films" />
                      </Arguments>
                    </MethodCall>
                  </RightOperand>
                </Assignment>
                <ForEachLoop ValueName="row">
                  <Enumerated>
                    <PropertyRef PropertyName="Rows" Optional="False">
                      <Owner>
                        <ItemRef>
                          <Owner>
                            <PropertyRef PropertyName="Tables" Optional="False">
                              <Owner>
                                <VariableRef Name="ds" />
                              </Owner>
                            </PropertyRef>
                          </Owner>
                          <Index>
                            <Literal Type="int" Value="0" />
                          </Index>
                        </ItemRef>
                      </Owner>
                    </PropertyRef>
                  </Enumerated>
                  <Action>
                    <FunctionCall FunctionName="println">
                      <Arguments>
                        <Literal Type="string" Value="{0} {1} ({2})" />
                        <ItemRef>
                          <Owner>
                            <VariableRef Name="row" />
                          </Owner>
                          <Index>
                            <Literal Type="string" Value="film_id" />
                          </Index>
                        </ItemRef>
                        <ItemRef>
                          <Owner>
                            <VariableRef Name="row" />
                          </Owner>
                          <Index>
                            <Literal Type="string" Value="title" />
                          </Index>
                        </ItemRef>
                        <ItemRef>
                          <Owner>
                            <VariableRef Name="row" />
                          </Owner>
                          <Index>
                            <Literal Type="string" Value="release_year" />
                          </Index>
                        </ItemRef>
                      </Arguments>
                    </FunctionCall>
                  </Action>
                </ForEachLoop>
                <MethodCall FunctionName="Dispose" Optional="False">
                  <Target>
                    <VariableRef Name="ds" />
                  </Target>
                  <Arguments />
                </MethodCall>
              </TryBlock>
              <CatchBlock>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <BinaryExpression Operator="Plus">
                      <LeftOperand>
                        <BinaryExpression Operator="Plus">
                          <LeftOperand>
                            <PropertyRef PropertyName="name" Optional="False">
                              <Owner>
                                <VariableRef Name="ex" />
                              </Owner>
                            </PropertyRef>
                          </LeftOperand>
                          <RightOperand>
                            <Literal Type="string" Value=" : " />
                          </RightOperand>
                        </BinaryExpression>
                      </LeftOperand>
                      <RightOperand>
                        <PropertyRef PropertyName="message" Optional="False">
                          <Owner>
                            <VariableRef Name="ex" />
                          </Owner>
                        </PropertyRef>
                      </RightOperand>
                    </BinaryExpression>
                  </Arguments>
                </FunctionCall>
              </CatchBlock>
              <FinallyBlock>
                <TryCatchFinally ExceptionName="ex1">
                  <TryBlock>
                    <MethodCall FunctionName="exec" Optional="False">
                      <Target>
                        <VariableRef Name="dbo" />
                      </Target>
                      <Arguments>
                        <Literal Type="string" Value="drop table test" />
                      </Arguments>
                    </MethodCall>
                  </TryBlock>
                  <CatchBlock />
                  <FinallyBlock>
                    <TryCatchFinally ExceptionName="ex2">
                      <TryBlock>
                        <MethodCall FunctionName="dispose" Optional="False">
                          <Target>
                            <VariableRef Name="dbo" />
                          </Target>
                          <Arguments />
                        </MethodCall>
                      </TryBlock>
                      <CatchBlock />
                    </TryCatchFinally>
                  </FinallyBlock>
                </TryCatchFinally>
              </FinallyBlock>
            </TryCatchFinally>
          </Body>
        </FunctionDecl>
        <FunctionDecl Name="sqlite_test">
          <Parameters />
          <Body>
            <ConstantDecl>
              <PropertyInitializer Name="CONNECTION_STRING">
                <Value>
                  <Literal Type="string" Value="Data Source=:memory:;User Id=sa" />
                </Value>
              </PropertyInitializer>
            </ConstantDecl>
            <FunctionCall FunctionName="println">
              <Arguments>
                <BinaryExpression Operator="Plus">
                  <LeftOperand>
                    <Literal Type="string" Value="Testing SQLite with connection string: " />
                  </LeftOperand>
                  <RightOperand>
                    <VariableRef Name="CONNECTION_STRING" />
                  </RightOperand>
                </BinaryExpression>
              </Arguments>
            </FunctionCall>
            <FunctionCall FunctionName="println">
              <Arguments />
            </FunctionCall>
            <TryCatchFinally ExceptionName="ex">
              <TryBlock>
                <Assignment Operator="None">
                  <LeftOperand>
                    <VariableRef Name="dbo" />
                  </LeftOperand>
                  <RightOperand>
                    <ConstructorCall ClassName="DBO">
                      <Arguments>
                        <Literal Type="string" Value="sqlite" />
                        <VariableRef Name="CONNECTION_STRING" />
                      </Arguments>
                    </ConstructorCall>
                  </RightOperand>
                </Assignment>
                <MethodCall FunctionName="exec" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments>
                    <Literal Type="string" Value="create table test (id integer not null, name varchar not null, primary key (id))" />
                  </Arguments>
                </MethodCall>
                <MethodCall FunctionName="execMany" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments>
                    <Literal Type="string" Value="insert into test (name) values (@name)" />
                    <ListInitializer>
                      <Items>
                        <Literal Type="string" Value="name" />
                      </Items>
                    </ListInitializer>
                    <VariableRef Name="names" />
                  </Arguments>
                </MethodCall>
                <Assignment Operator="None">
                  <LeftOperand>
                    <VariableRef Name="cmd" />
                  </LeftOperand>
                  <RightOperand>
                    <MethodCall FunctionName="addParam" Optional="False">
                      <Target>
                        <MethodCall FunctionName="prepare" Optional="False">
                          <Target>
                            <VariableRef Name="dbo" />
                          </Target>
                          <Arguments>
                            <Literal Type="string" Value="delete from test where id = @id" />
                          </Arguments>
                        </MethodCall>
                      </Target>
                      <Arguments>
                        <ObjectInitializer>
                          <PropertyInitializer Name="name">
                            <Value>
                              <Literal Type="string" Value="id" />
                            </Value>
                          </PropertyInitializer>
                          <PropertyInitializer Name="dbType">
                            <Value>
                              <Literal Type="string" Value="Int32" />
                            </Value>
                          </PropertyInitializer>
                        </ObjectInitializer>
                      </Arguments>
                    </MethodCall>
                  </RightOperand>
                </Assignment>
                <MethodCall FunctionName="beginTransaction" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments />
                </MethodCall>
                <MethodCall FunctionName="exec" Optional="False">
                  <Target>
                    <MethodCall FunctionName="setParam" Optional="False">
                      <Target>
                        <VariableRef Name="cmd" />
                      </Target>
                      <Arguments>
                        <Literal Type="string" Value="id" />
                        <Literal Type="int" Value="3" />
                      </Arguments>
                    </MethodCall>
                  </Target>
                  <Arguments />
                </MethodCall>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <Literal Type="string" Value="whithin transaction:" />
                  </Arguments>
                </FunctionCall>
                <MethodCall FunctionName="eachRow" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments>
                    <Literal Type="string" Value="select * from test" />
                    <InlineFunction>
                      <Parameters>
                        <ParameterDecl Name="t" ByRef="False" VaArgs="False" />
                      </Parameters>
                      <Body>
                        <Return>
                          <FunctionCall FunctionName="println">
                            <Arguments>
                              <Literal Type="string" Value="{0} : {1}" />
                              <PropertyRef PropertyName="id" Optional="False">
                                <Owner>
                                  <VariableRef Name="t" />
                                </Owner>
                              </PropertyRef>
                              <PropertyRef PropertyName="name" Optional="False">
                                <Owner>
                                  <VariableRef Name="t" />
                                </Owner>
                              </PropertyRef>
                            </Arguments>
                          </FunctionCall>
                        </Return>
                      </Body>
                    </InlineFunction>
                  </Arguments>
                </MethodCall>
                <MethodCall FunctionName="rollback" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments />
                </MethodCall>
                <FunctionCall FunctionName="println">
                  <Arguments />
                </FunctionCall>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <Literal Type="string" Value="after rolling back transaction:" />
                  </Arguments>
                </FunctionCall>
                <MethodCall FunctionName="eachRow" Optional="False">
                  <Target>
                    <MethodCall FunctionName="prepare" Optional="False">
                      <Target>
                        <VariableRef Name="dbo" />
                      </Target>
                      <Arguments>
                        <Literal Type="string" Value="select * from test" />
                      </Arguments>
                    </MethodCall>
                  </Target>
                  <Arguments>
                    <InlineFunction>
                      <Parameters>
                        <ParameterDecl Name="t" ByRef="False" VaArgs="False" />
                      </Parameters>
                      <Body>
                        <Return>
                          <FunctionCall FunctionName="println">
                            <Arguments>
                              <Literal Type="string" Value="{0} : {1}" />
                              <VariableRef Name="t" />
                            </Arguments>
                          </FunctionCall>
                        </Return>
                      </Body>
                    </InlineFunction>
                    <VariableRef Name="to_list" />
                  </Arguments>
                </MethodCall>
                <FunctionCall FunctionName="println">
                  <Arguments />
                </FunctionCall>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <Literal Type="string" Value="name of item #5: {0}" />
                    <MethodCall FunctionName="find" Optional="False">
                      <Target>
                        <VariableRef Name="dbo" />
                      </Target>
                      <Arguments>
                        <Literal Type="string" Value="test" />
                        <Literal Type="string" Value="name" />
                        <Literal Type="string" Value="id = 5" />
                      </Arguments>
                    </MethodCall>
                  </Arguments>
                </FunctionCall>
                <Assignment Operator="None">
                  <LeftOperand>
                    <VariableRef Name="dbo1" />
                  </LeftOperand>
                  <RightOperand>
                    <ConstructorCall ClassName="DBO">
                      <Arguments>
                        <Literal Type="string" Value="mysql" />
                        <Literal Type="string" Value="Server=localhost;User=testuser;Password=testpwd;Database=world" />
                      </Arguments>
                    </ConstructorCall>
                  </RightOperand>
                </Assignment>
                <MethodCall FunctionName="exec" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments>
                    <Literal Type="string" Value="create table country (code char primary key, name varchar, continent varchar)" />
                  </Arguments>
                </MethodCall>
                <MethodCall FunctionName="execMany" Optional="False">
                  <Target>
                    <VariableRef Name="dbo" />
                  </Target>
                  <Arguments>
                    <Literal Type="string" Value="insert into country values(:code, :name, :continent)" />
                    <ListInitializer>
                      <Items>
                        <Literal Type="string" Value="code" />
                        <Literal Type="string" Value="name" />
                        <Literal Type="string" Value="continent" />
                      </Items>
                    </ListInitializer>
                    <MethodCall FunctionName="query" Optional="False">
                      <Target>
                        <VariableRef Name="dbo1" />
                      </Target>
                      <Arguments>
                        <Literal Type="string" Value="select code, name, continent from country" />
                      </Arguments>
                    </MethodCall>
                  </Arguments>
                </MethodCall>
                <MethodCall FunctionName="dispose" Optional="False">
                  <Target>
                    <VariableRef Name="dbo1" />
                  </Target>
                  <Arguments />
                </MethodCall>
                <FunctionCall FunctionName="println">
                  <Arguments />
                </FunctionCall>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <Literal Type="string" Value="10 first countries in the database:" />
                  </Arguments>
                </FunctionCall>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <BinaryExpression Operator="Times">
                      <LeftOperand>
                        <Literal Type="string" Value="-" />
                      </LeftOperand>
                      <RightOperand>
                        <Literal Type="int" Value="35" />
                      </RightOperand>
                    </BinaryExpression>
                  </Arguments>
                </FunctionCall>
                <Assignment Operator="None">
                  <LeftOperand>
                    <VariableRef Name="ds" />
                  </LeftOperand>
                  <RightOperand>
                    <MethodCall FunctionName="getDataSet" Optional="False">
                      <Target>
                        <VariableRef Name="dbo" />
                      </Target>
                      <Arguments>
                        <Literal Type="string" Value="Countries" />
                        <Literal Type="string" Value="select * from country limit 10" />
                      </Arguments>
                    </MethodCall>
                  </RightOperand>
                </Assignment>
                <ForEachLoop ValueName="row">
                  <Enumerated>
                    <PropertyRef PropertyName="Rows" Optional="False">
                      <Owner>
                        <ItemRef>
                          <Owner>
                            <PropertyRef PropertyName="Tables" Optional="False">
                              <Owner>
                                <VariableRef Name="ds" />
                              </Owner>
                            </PropertyRef>
                          </Owner>
                          <Index>
                            <Literal Type="int" Value="0" />
                          </Index>
                        </ItemRef>
                      </Owner>
                    </PropertyRef>
                  </Enumerated>
                  <Action>
                    <FunctionCall FunctionName="println">
                      <Arguments>
                        <Literal Type="string" Value="{0,-5}{1,-22}{2}" />
                        <ItemRef>
                          <Owner>
                            <VariableRef Name="row" />
                          </Owner>
                          <Index>
                            <Literal Type="string" Value="code" />
                          </Index>
                        </ItemRef>
                        <ItemRef>
                          <Owner>
                            <VariableRef Name="row" />
                          </Owner>
                          <Index>
                            <Literal Type="string" Value="name" />
                          </Index>
                        </ItemRef>
                        <ItemRef>
                          <Owner>
                            <VariableRef Name="row" />
                          </Owner>
                          <Index>
                            <Literal Type="string" Value="continent" />
                          </Index>
                        </ItemRef>
                      </Arguments>
                    </FunctionCall>
                  </Action>
                </ForEachLoop>
                <MethodCall FunctionName="Dispose" Optional="False">
                  <Target>
                    <VariableRef Name="ds" />
                  </Target>
                  <Arguments />
                </MethodCall>
              </TryBlock>
              <CatchBlock>
                <FunctionCall FunctionName="println">
                  <Arguments>
                    <BinaryExpression Operator="Plus">
                      <LeftOperand>
                        <BinaryExpression Operator="Plus">
                          <LeftOperand>
                            <PropertyRef PropertyName="name" Optional="False">
                              <Owner>
                                <VariableRef Name="ex" />
                              </Owner>
                            </PropertyRef>
                          </LeftOperand>
                          <RightOperand>
                            <Literal Type="string" Value=" : " />
                          </RightOperand>
                        </BinaryExpression>
                      </LeftOperand>
                      <RightOperand>
                        <PropertyRef PropertyName="message" Optional="False">
                          <Owner>
                            <VariableRef Name="ex" />
                          </Owner>
                        </PropertyRef>
                      </RightOperand>
                    </BinaryExpression>
                  </Arguments>
                </FunctionCall>
              </CatchBlock>
              <FinallyBlock>
                <TryCatchFinally ExceptionName="ex2">
                  <TryBlock>
                    <MethodCall FunctionName="dispose" Optional="False">
                      <Target>
                        <VariableRef Name="dbo" />
                      </Target>
                      <Arguments />
                    </MethodCall>
                  </TryBlock>
                  <CatchBlock />
                </TryCatchFinally>
              </FinallyBlock>
            </TryCatchFinally>
          </Body>
        </FunctionDecl>
        <FunctionDecl Name="menu">
          <Parameters />
          <Body>
            <FunctionCall FunctionName="println">
              <Arguments>
                <Literal Type="string" Value="Please choose a DBMS to test (1: MS Access, 2: MS SQL Server, 3: Oracle, 4: MySQL, 5: PostgreSQL, 6: SQLite, 0: Quit)" />
              </Arguments>
            </FunctionCall>
            <Return>
              <FunctionCall FunctionName="readint">
                <Arguments>
                  <Literal Type="string" Value="Your choice? " />
                  <Literal Type="int" Value="0" />
                  <Literal Type="int" Value="6" />
                  <UnaryExpression Operator="Minus">
                    <Operand>
                      <Literal Type="int" Value="1" />
                    </Operand>
                  </UnaryExpression>
                </Arguments>
              </FunctionCall>
            </Return>
          </Body>
        </FunctionDecl>
        <VariableDecl>
          <PropertyInitializer Name="dbo" />
          <PropertyInitializer Name="choice" />
        </VariableDecl>
        <DoLoop>
          <Guard>
            <BinaryExpression Operator="NotEqual">
              <LeftOperand>
                <VariableRef Name="choice" />
              </LeftOperand>
              <RightOperand>
                <Literal Type="int" Value="0" />
              </RightOperand>
            </BinaryExpression>
          </Guard>
          <Action>
            <Block>
              <Assignment Operator="None">
                <LeftOperand>
                  <VariableRef Name="choice" />
                </LeftOperand>
                <RightOperand>
                  <FunctionCall FunctionName="menu">
                    <Arguments />
                  </FunctionCall>
                </RightOperand>
              </Assignment>
              <StaticMethodCall Name="System::Console::Clear">
                <Arguments />
              </StaticMethodCall>
              <SwitchBlock DefaultCase="13">
                <Expression>
                  <VariableRef Name="choice" />
                </Expression>
                <Cases>
                  <SwitchCase HashCode="0" Address="0" />
                  <SwitchCase HashCode="1" Address="1" />
                  <SwitchCase HashCode="2" Address="3" />
                  <SwitchCase HashCode="3" Address="5" />
                  <SwitchCase HashCode="4" Address="7" />
                  <SwitchCase HashCode="5" Address="9" />
                  <SwitchCase HashCode="6" Address="11" />
                </Cases>
                <Statements>
                  <Break />
                  <FunctionCall FunctionName="access_test">
                    <Arguments />
                  </FunctionCall>
                  <Break />
                  <FunctionCall FunctionName="mssql_test">
                    <Arguments />
                  </FunctionCall>
                  <Break />
                  <FunctionCall FunctionName="oracle_test">
                    <Arguments />
                  </FunctionCall>
                  <Break />
                  <FunctionCall FunctionName="mysql_test">
                    <Arguments />
                  </FunctionCall>
                  <Break />
                  <FunctionCall FunctionName="postgres_test">
                    <Arguments />
                  </FunctionCall>
                  <Break />
                  <FunctionCall FunctionName="sqlite_test">
                    <Arguments />
                  </FunctionCall>
                  <Break />
                  <FunctionCall FunctionName="println">
                    <Arguments>
                      <Literal Type="string" Value="invalid choice" />
                    </Arguments>
                  </FunctionCall>
                  <Break />
                </Statements>
              </SwitchBlock>
              <FunctionCall FunctionName="println">
                <Arguments />
              </FunctionCall>
            </Block>
          </Action>
        </DoLoop>
      </Block>
    </PositiveAction>
  </IfElse>
</Program>