<?xml version="1.0"?>
<Program>
  <ClassDefinition ClassName="Employee">
    <Constructor>
      <ClassMethodDecl Name="Employee" Scope="Public">
        <Parameters>
          <ParameterDecl Name="name" ByRef="False" VaArgs="False" />
          <ParameterDecl Name="age" ByRef="False" VaArgs="False" />
          <ParameterDecl Name="salary" ByRef="False" VaArgs="False" />
          <ParameterDecl Name="dateHired" ByRef="False" VaArgs="False" />
        </Parameters>
        <Body>
          <Assignment Operator="None">
            <LeftOperand>
              <PropertyRef PropertyName="name" Optional="False">
                <Owner>
                  <SelfReference />
                </Owner>
              </PropertyRef>
            </LeftOperand>
            <RightOperand>
              <VariableRef Name="name" />
            </RightOperand>
          </Assignment>
          <Assignment Operator="None">
            <LeftOperand>
              <PropertyRef PropertyName="age" Optional="False">
                <Owner>
                  <SelfReference />
                </Owner>
              </PropertyRef>
            </LeftOperand>
            <RightOperand>
              <VariableRef Name="age" />
            </RightOperand>
          </Assignment>
          <Assignment Operator="None">
            <LeftOperand>
              <PropertyRef PropertyName="salary" Optional="False">
                <Owner>
                  <SelfReference />
                </Owner>
              </PropertyRef>
            </LeftOperand>
            <RightOperand>
              <VariableRef Name="salary" />
            </RightOperand>
          </Assignment>
          <Assignment Operator="None">
            <LeftOperand>
              <PropertyRef PropertyName="dateHired" Optional="False">
                <Owner>
                  <SelfReference />
                </Owner>
              </PropertyRef>
            </LeftOperand>
            <RightOperand>
              <VariableRef Name="dateHired" />
            </RightOperand>
          </Assignment>
        </Body>
      </ClassMethodDecl>
    </Constructor>
    <Fields />
    <Properties>
      <ClassPropertyDecl Name="name" Scope="Public" Access="ReadWrite" ReaderScope="Public" WriterScope="Public" />
      <ClassPropertyDecl Name="age" Scope="Public" Access="ReadWrite" ReaderScope="Public" WriterScope="Public" />
      <ClassPropertyDecl Name="salary" Scope="Public" Access="ReadWrite" ReaderScope="Public" WriterScope="Public" />
      <ClassPropertyDecl Name="dateHired" Scope="Public" Access="ReadWrite" ReaderScope="Public" WriterScope="Public" />
    </Properties>
    <Methods>
      <ClassMethodDecl Name="toString" Scope="Public">
        <Parameters>
          <ParameterDecl Name="fmt" ByRef="False" VaArgs="False" DefaultValue="" />
        </Parameters>
        <Body>
          <Return>
            <StringInterpolation Pattern="Employee {{name: {0}, age: {1}, salary: {2}, dateHired: {3:d}}}">
              <Substitions>
                <PropertyRef PropertyName="name" Optional="False">
                  <Owner>
                    <SelfReference />
                  </Owner>
                </PropertyRef>
                <PropertyRef PropertyName="age" Optional="False">
                  <Owner>
                    <SelfReference />
                  </Owner>
                </PropertyRef>
                <PropertyRef PropertyName="salary" Optional="False">
                  <Owner>
                    <SelfReference />
                  </Owner>
                </PropertyRef>
                <PropertyRef PropertyName="dateHired" Optional="False">
                  <Owner>
                    <SelfReference />
                  </Owner>
                </PropertyRef>
              </Substitions>
            </StringInterpolation>
          </Return>
        </Body>
      </ClassMethodDecl>
    </Methods>
    <Events />
  </ClassDefinition>
  <ClassDefinition ClassName="Developper" SuperClassName="Employee">
    <Constructor>
      <ClassMethodDecl Name="Developper" Scope="Public">
        <Parameters>
          <ParameterDecl Name="name" ByRef="False" VaArgs="False" />
          <ParameterDecl Name="age" ByRef="False" VaArgs="False" />
          <ParameterDecl Name="salary" ByRef="False" VaArgs="False" />
          <ParameterDecl Name="dateHired" ByRef="False" VaArgs="False" />
          <ParameterDecl Name="languages" ByRef="False" VaArgs="False" />
        </Parameters>
        <Body>
          <ParentConstructorCall>
            <Arguments>
              <VariableRef Name="name" />
              <VariableRef Name="age" />
              <VariableRef Name="salary" />
              <VariableRef Name="dateHired" />
            </Arguments>
            <NamedArgs />
          </ParentConstructorCall>
          <Assignment Operator="None">
            <LeftOperand>
              <PropertyRef PropertyName="languages" Optional="False">
                <Owner>
                  <SelfReference />
                </Owner>
              </PropertyRef>
            </LeftOperand>
            <RightOperand>
              <VariableRef Name="languages" />
            </RightOperand>
          </Assignment>
        </Body>
      </ClassMethodDecl>
    </Constructor>
    <Fields />
    <Properties>
      <ClassPropertyDecl Name="languages" Scope="Public" Access="ReadWrite" ReaderScope="Public" WriterScope="Public" />
    </Properties>
    <Methods>
      <ClassMethodDecl Name="toString" Scope="Public">
        <Parameters>
          <ParameterDecl Name="fmt" ByRef="False" VaArgs="False" DefaultValue="" />
        </Parameters>
        <Body>
          <Return>
            <StringInterpolation Pattern="Developper {{name: {0}, age: {1}, salary: {2}, dateHired: {3:d}, languages: {4}}}">
              <Substitions>
                <PropertyRef PropertyName="name" Optional="False">
                  <Owner>
                    <SelfReference />
                  </Owner>
                </PropertyRef>
                <PropertyRef PropertyName="age" Optional="False">
                  <Owner>
                    <SelfReference />
                  </Owner>
                </PropertyRef>
                <PropertyRef PropertyName="salary" Optional="False">
                  <Owner>
                    <SelfReference />
                  </Owner>
                </PropertyRef>
                <PropertyRef PropertyName="dateHired" Optional="False">
                  <Owner>
                    <SelfReference />
                  </Owner>
                </PropertyRef>
                <MethodCall FunctionName="join" Optional="False">
                  <Target>
                    <PropertyRef PropertyName="languages" Optional="False">
                      <Owner>
                        <SelfReference />
                      </Owner>
                    </PropertyRef>
                  </Target>
                  <Arguments>
                    <Literal Type="string" Value="|" />
                  </Arguments>
                  <NamedArgs />
                </MethodCall>
              </Substitions>
            </StringInterpolation>
          </Return>
        </Body>
      </ClassMethodDecl>
    </Methods>
    <Events />
  </ClassDefinition>
  <Assignment Operator="None">
    <LeftOperand>
      <VariableRef Name="o" />
    </LeftOperand>
    <RightOperand>
      <ObjectInitializer>
        <PropertyInitializer Name="name">
          <Value>
            <Literal Type="string" Value="my object" />
          </Value>
        </PropertyInitializer>
        <PropertyInitializer Name="size">
          <Value>
            <Literal Type="int" Value="18" />
          </Value>
        </PropertyInitializer>
        <PropertyInitializer Name="color">
          <Value>
            <Literal Type="string" Value="blue" />
          </Value>
        </PropertyInitializer>
      </ObjectInitializer>
    </RightOperand>
  </Assignment>
  <Assignment Operator="None">
    <LeftOperand>
      <VariableRef Name="res" />
    </LeftOperand>
    <RightOperand>
      <PatternMatching>
        <Expression>
          <VariableRef Name="o" />
        </Expression>
        <MatchCases>
          <MatchCase>
            <NullPattern />
            <Expression>
              <Literal Type="string" Value="null" />
            </Expression>
          </MatchCase>
          <MatchCase>
            <ValuePattern Value="5" />
            <Expression>
              <Literal Type="string" Value="five" />
            </Expression>
          </MatchCase>
          <MatchCase>
            <ObjectPattern TypeName="object">
              <Example height="150" color="blue" />
            </ObjectPattern>
            <Expression>
              <Literal Type="string" Value="a blue and 150 tall object" />
            </Expression>
          </MatchCase>
          <MatchCase>
            <ObjectPattern TypeName="object">
              <Example name="my object" size="18" />
            </ObjectPattern>
            <Expression>
              <Literal Type="string" Value="my object of size 18" />
            </Expression>
          </MatchCase>
        </MatchCases>
      </PatternMatching>
    </RightOperand>
  </Assignment>
  <FunctionCall FunctionName="println">
    <Arguments>
      <StringInterpolation Pattern="o is {0}">
        <Substitions>
          <VariableRef Name="o" />
        </Substitions>
      </StringInterpolation>
    </Arguments>
    <NamedArgs />
  </FunctionCall>
  <FunctionCall FunctionName="println">
    <Arguments>
      <StringInterpolation Pattern="result with o: {0}">
        <Substitions>
          <VariableRef Name="res" />
        </Substitions>
      </StringInterpolation>
    </Arguments>
    <NamedArgs />
  </FunctionCall>
  <FunctionCall FunctionName="println">
    <Arguments />
    <NamedArgs />
  </FunctionCall>
  <Assignment Operator="None">
    <LeftOperand>
      <VariableRef Name="res" />
    </LeftOperand>
    <RightOperand>
      <PatternMatching>
        <Expression>
          <VariableRef Name="PI" />
        </Expression>
        <MatchCases>
          <MatchCase>
            <ValuePattern Value="3,14" />
            <Expression>
              <Literal Type="string" Value="three-point-fourteen" />
            </Expression>
          </MatchCase>
          <MatchCase>
            <CompositePattern>
              <ValuePattern Value="0" />
              <ValuePattern Value="1" />
              <RangePattern LowerBound="2" UpperBound="4" />
              <RangePattern LowerBound="5" UpperBound="8" />
              <ValuePattern Value="9" />
            </CompositePattern>
            <Expression>
              <Literal Type="string" Value="in the set {0, 1, 2 to 4, 5 to 8, 9}" />
            </Expression>
          </MatchCase>
          <MatchCase>
            <TypePattern TypeName="float" />
            <Expression>
              <Literal Type="string" Value="a floatting-point number" />
            </Expression>
          </MatchCase>
        </MatchCases>
      </PatternMatching>
    </RightOperand>
  </Assignment>
  <FunctionCall FunctionName="println">
    <Arguments>
      <StringInterpolation Pattern="result with PI: {0}">
        <Substitions>
          <VariableRef Name="res" />
        </Substitions>
      </StringInterpolation>
    </Arguments>
    <NamedArgs />
  </FunctionCall>
  <FunctionCall FunctionName="println">
    <Arguments />
    <NamedArgs />
  </FunctionCall>
  <Assignment Operator="None">
    <LeftOperand>
      <VariableRef Name="res" />
    </LeftOperand>
    <RightOperand>
      <PatternMatching>
        <Expression>
          <Conversion TypeName="int">
            <Expression>
              <FunctionCall FunctionName="readln">
                <Arguments>
                  <Literal Type="string" Value="type a number: " />
                </Arguments>
                <NamedArgs />
              </FunctionCall>
            </Expression>
          </Conversion>
        </Expression>
        <MatchCases>
          <MatchCase>
            <RangePattern UpperBound="-1" />
            <Expression>
              <Literal Type="string" Value="negative" />
            </Expression>
          </MatchCase>
          <MatchCase>
            <RangePattern LowerBound="0" UpperBound="4" />
            <Expression>
              <Literal Type="string" Value="from 0 to 4" />
            </Expression>
          </MatchCase>
          <MatchCase>
            <RangePattern LowerBound="5" UpperBound="9" />
            <Expression>
              <AnonymousCall>
                <Callee>
                  <InlineFunction>
                    <Parameters />
                    <Body>
                      <FunctionCall FunctionName="print">
                        <Arguments>
                          <Literal Type="string" Value="yeah i know, " />
                        </Arguments>
                        <NamedArgs />
                      </FunctionCall>
                      <FunctionCall FunctionName="println">
                        <Arguments>
                          <Literal Type="string" Value="it's between 5 and 9!" />
                        </Arguments>
                        <NamedArgs />
                      </FunctionCall>
                      <Return>
                        <VariableRef Name="__value" />
                      </Return>
                    </Body>
                  </InlineFunction>
                </Callee>
              </AnonymousCall>
            </Expression>
          </MatchCase>
          <MatchCase>
            <RangePattern LowerBound="10" />
            <Expression>
              <Literal Type="string" Value="10 and above" />
            </Expression>
          </MatchCase>
        </MatchCases>
      </PatternMatching>
    </RightOperand>
  </Assignment>
  <FunctionCall FunctionName="println">
    <Arguments>
      <StringInterpolation Pattern="result: {0}">
        <Substitions>
          <VariableRef Name="res" />
        </Substitions>
      </StringInterpolation>
    </Arguments>
    <NamedArgs />
  </FunctionCall>
  <FunctionCall FunctionName="println">
    <Arguments />
    <NamedArgs />
  </FunctionCall>
  <ConstantDecl>
    <PropertyInitializer Name="number_regex">
      <Value>
        <Literal Type="string" Value="[+-]?\d+(\.\d+)?([Ee][+-]?\d+)?" />
      </Value>
    </PropertyInitializer>
  </ConstantDecl>
  <Assignment Operator="None">
    <LeftOperand>
      <VariableRef Name="res" />
    </LeftOperand>
    <RightOperand>
      <PatternMatching>
        <Expression>
          <FunctionCall FunctionName="readln">
            <Arguments>
              <Literal Type="string" Value="type some text: " />
            </Arguments>
            <NamedArgs />
          </FunctionCall>
        </Expression>
        <MatchCases>
          <MatchCase>
            <PredicatePattern ParameterName="x">
              <Predicate>
                <BinaryExpression Operator="AndAlso">
                  <LeftOperand>
                    <BinaryExpression Operator="Matches">
                      <LeftOperand>
                        <VariableRef Name="x" />
                      </LeftOperand>
                      <RightOperand>
                        <VariableRef Name="number_regex" />
                      </RightOperand>
                    </BinaryExpression>
                  </LeftOperand>
                  <RightOperand>
                    <BinaryExpression Operator="GreaterThan">
                      <LeftOperand>
                        <Conversion TypeName="decimal">
                          <Expression>
                            <VariableRef Name="x" />
                          </Expression>
                        </Conversion>
                      </LeftOperand>
                      <RightOperand>
                        <Literal Type="int" Value="0" />
                      </RightOperand>
                    </BinaryExpression>
                  </RightOperand>
                </BinaryExpression>
              </Predicate>
            </PredicatePattern>
            <Expression>
              <Literal Type="string" Value="it's a positive number" />
            </Expression>
          </MatchCase>
          <MatchCase>
            <PredicatePattern ParameterName="x">
              <Predicate>
                <BinaryExpression Operator="Matches">
                  <LeftOperand>
                    <VariableRef Name="x" />
                  </LeftOperand>
                  <RightOperand>
                    <VariableRef Name="number_regex" />
                  </RightOperand>
                </BinaryExpression>
              </Predicate>
            </PredicatePattern>
            <Expression>
              <Literal Type="string" Value="it's just a number" />
            </Expression>
          </MatchCase>
          <MatchCase>
            <AlwaysPattern />
            <Expression>
              <Literal Type="string" Value="it's not a number" />
            </Expression>
          </MatchCase>
        </MatchCases>
      </PatternMatching>
    </RightOperand>
  </Assignment>
  <FunctionCall FunctionName="println">
    <Arguments>
      <StringInterpolation Pattern="result: {0}">
        <Substitions>
          <VariableRef Name="res" />
        </Substitions>
      </StringInterpolation>
    </Arguments>
    <NamedArgs />
  </FunctionCall>
  <FunctionCall FunctionName="println">
    <Arguments />
    <NamedArgs />
  </FunctionCall>
  <Assignment Operator="None">
    <LeftOperand>
      <VariableRef Name="l" />
    </LeftOperand>
    <RightOperand>
      <ListInitializer>
        <Items>
          <ConstructorCall ClassName="Employee">
            <Arguments>
              <Literal Type="string" Value="Franklin Kenyata" />
              <Literal Type="int" Value="44" />
              <Literal Type="int" Value="5000" />
              <Literal Type="date" Value="2010-01-14 00:00:00" />
            </Arguments>
            <NamedArgs />
          </ConstructorCall>
          <ConstructorCall ClassName="Employee">
            <Arguments>
              <Literal Type="string" Value="Jeanette Diabaté" />
              <Literal Type="int" Value="32" />
              <Literal Type="int" Value="3500" />
              <Literal Type="date" Value="2014-09-30 00:00:00" />
            </Arguments>
            <NamedArgs />
          </ConstructorCall>
          <ConstructorCall ClassName="Developper">
            <Arguments>
              <Literal Type="string" Value="Dereck Musa" />
              <Literal Type="int" Value="44" />
              <Literal Type="int" Value="4200" />
              <Literal Type="date" Value="2010-01-14 00:00:00" />
              <ListInitializer>
                <Items>
                  <Literal Type="string" Value="C++" />
                  <Literal Type="string" Value="C#" />
                  <Literal Type="string" Value="Java" />
                </Items>
              </ListInitializer>
            </Arguments>
            <NamedArgs />
          </ConstructorCall>
          <Literal Type="void" Value="" />
          <ConstructorCall ClassName="Exception">
            <Arguments>
              <Literal Type="string" Value="this is an exception" />
            </Arguments>
            <NamedArgs />
          </ConstructorCall>
        </Items>
      </ListInitializer>
    </RightOperand>
  </Assignment>
  <MethodCall FunctionName="add" Optional="False">
    <Target>
      <VariableRef Name="l" />
    </Target>
    <Arguments>
      <AlteredCopy>
        <PropertyInitializers>
          <PropertyInitializer Name="name">
            <Value>
              <Literal Type="string" Value="Ahmadu Suleyman" />
            </Value>
          </PropertyInitializer>
          <PropertyInitializer Name="salary">
            <Value>
              <Literal Type="int" Value="7000" />
            </Value>
          </PropertyInitializer>
        </PropertyInitializers>
      </AlteredCopy>
    </Arguments>
    <NamedArgs />
  </MethodCall>
  <MethodCall FunctionName="add" Optional="False">
    <Target>
      <VariableRef Name="l" />
    </Target>
    <Arguments>
      <AlteredCopy>
        <PropertyInitializers>
          <PropertyInitializer Name="name">
            <Value>
              <Literal Type="string" Value="Kim Ondo" />
            </Value>
          </PropertyInitializer>
          <PropertyInitializer Name="age">
            <Value>
              <Literal Type="int" Value="36" />
            </Value>
          </PropertyInitializer>
          <PropertyInitializer Name="languages">
            <Value>
              <ListInitializer>
                <Items>
                  <Literal Type="string" Value="Python" />
                  <Literal Type="string" Value="TypeScript" />
                </Items>
              </ListInitializer>
            </Value>
          </PropertyInitializer>
        </PropertyInitializers>
      </AlteredCopy>
    </Arguments>
    <NamedArgs />
  </MethodCall>
  <MethodCall FunctionName="each" Optional="False">
    <Target>
      <VariableRef Name="l" />
    </Target>
    <Arguments>
      <InlineFunction>
        <Parameters>
          <ParameterDecl Name="item" ByRef="False" VaArgs="False" />
        </Parameters>
        <Body>
          <Assignment Operator="None">
            <LeftOperand>
              <VariableRef Name="res" />
            </LeftOperand>
            <RightOperand>
              <PatternMatching>
                <Expression>
                  <VariableRef Name="item" />
                </Expression>
                <MatchCases>
                  <MatchCase>
                    <NullPattern />
                    <Expression>
                      <Literal Type="string" Value="this item is null" />
                    </Expression>
                  </MatchCase>
                  <MatchCase>
                    <ObjectPattern TypeName="Employee">
                      <Example age="44" dateHired="2010-01-14 00:00:00" />
                    </ObjectPattern>
                    <Expression>
                      <StringInterpolation Pattern="{0} is 44 years old, he/she was hired on 2010-01-14 and earns ${1}/month">
                        <Substitions>
                          <PropertyRef PropertyName="name" Optional="False">
                            <Owner>
                              <VariableRef Name="item" />
                            </Owner>
                          </PropertyRef>
                          <PropertyRef PropertyName="salary" Optional="False">
                            <Owner>
                              <VariableRef Name="item" />
                            </Owner>
                          </PropertyRef>
                        </Substitions>
                      </StringInterpolation>
                    </Expression>
                  </MatchCase>
                  <MatchCase>
                    <AlwaysPattern />
                    <Expression>
                      <Literal Type="string" Value="neither null nor a 44 years old employee hired on 2010-01-14" />
                    </Expression>
                  </MatchCase>
                </MatchCases>
              </PatternMatching>
            </RightOperand>
          </Assignment>
          <FunctionCall FunctionName="println">
            <Arguments>
              <StringInterpolation Pattern="item = {0}">
                <Substitions>
                  <VariableRef Name="item" />
                </Substitions>
              </StringInterpolation>
            </Arguments>
            <NamedArgs />
          </FunctionCall>
          <FunctionCall FunctionName="println">
            <Arguments>
              <StringInterpolation Pattern="result with item: {0}">
                <Substitions>
                  <VariableRef Name="res" />
                </Substitions>
              </StringInterpolation>
            </Arguments>
            <NamedArgs />
          </FunctionCall>
          <FunctionCall FunctionName="println">
            <Arguments>
              <BinaryExpression Operator="Times">
                <LeftOperand>
                  <Literal Type="string" Value="-" />
                </LeftOperand>
                <RightOperand>
                  <Literal Type="int" Value="110" />
                </RightOperand>
              </BinaryExpression>
            </Arguments>
            <NamedArgs />
          </FunctionCall>
        </Body>
      </InlineFunction>
    </Arguments>
    <NamedArgs />
  </MethodCall>
  <FunctionCall FunctionName="println">
    <Arguments />
    <NamedArgs />
  </FunctionCall>
  <TryCatchFinally ExceptionName="e">
    <TryBlock>
      <PatternMatching>
        <Expression>
          <FunctionCall FunctionName="randint">
            <Arguments>
              <UnaryExpression Operator="Minus">
                <Operand>
                  <Literal Type="int" Value="7" />
                </Operand>
              </UnaryExpression>
              <Literal Type="int" Value="3" />
            </Arguments>
            <NamedArgs />
          </FunctionCall>
        </Expression>
        <MatchCases>
          <MatchCase>
            <RangePattern LowerBound="0" UpperBound="3" />
            <Expression>
              <FunctionCall FunctionName="println">
                <Arguments>
                  <StringInterpolation Pattern="{0} is OK!">
                    <Substitions>
                      <VariableRef Name="__value" />
                    </Substitions>
                  </StringInterpolation>
                </Arguments>
                <NamedArgs />
              </FunctionCall>
            </Expression>
          </MatchCase>
          <MatchCase>
            <AlwaysPattern />
            <Expression>
              <AnonymousCall>
                <Callee>
                  <InlineFunction>
                    <Parameters />
                    <Body>
                      <Throw>
                        <Literal Type="string" Value="I don't like negative values" />
                      </Throw>
                    </Body>
                  </InlineFunction>
                </Callee>
              </AnonymousCall>
            </Expression>
          </MatchCase>
        </MatchCases>
      </PatternMatching>
    </TryBlock>
    <CatchBlock>
      <FunctionCall FunctionName="println">
        <Arguments>
          <BinaryExpression Operator="Plus">
            <LeftOperand>
              <BinaryExpression Operator="Plus">
                <LeftOperand>
                  <PropertyRef PropertyName="name" Optional="False">
                    <Owner>
                      <VariableRef Name="e" />
                    </Owner>
                  </PropertyRef>
                </LeftOperand>
                <RightOperand>
                  <Literal Type="string" Value=" : " />
                </RightOperand>
              </BinaryExpression>
            </LeftOperand>
            <RightOperand>
              <PropertyRef PropertyName="message" Optional="False">
                <Owner>
                  <VariableRef Name="e" />
                </Owner>
              </PropertyRef>
            </RightOperand>
          </BinaryExpression>
        </Arguments>
        <NamedArgs />
      </FunctionCall>
    </CatchBlock>
  </TryCatchFinally>
  <FunctionCall FunctionName="readln">
    <Arguments />
    <NamedArgs />
  </FunctionCall>
</Program>