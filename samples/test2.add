import std::util;

abstract class A
{
	protected constructor()
	{
		this._list = randlst(randint(10, 30), 100);
	}
	
	public property []
	{
		read => this._list[__key];
		write => this._list[__key] = __value;
	}
	
	public property size => this._list.size;
	
	protected function first() => this._list[0];
	
	public function iterator()
	{
		foreach (item in this._list)
			yield item;
	}
}

class B : A
{
	public constructor(separator = ', ', prefix = '[', suffix = ']')
		: super()
	{
		this.separator = separator;
		this.prefix = prefix;
		this.suffix = suffix;
	}
	
	public property []
	{
		read => super[__key];
		write => super[__key] = (int)__value;
	}
	
	public property size => super::size;
	
	public function getFirst()
	{
		first = super::first;
		println('first item from B: ' + first());
		return first;
	}
	
	public function toString(fmt = '') =>
		this.prefix + this._list.join(this.separator) + this.suffix;
}

b = new B(prefix: '{', suffix: '}');
println($'b = {b}');
println($'b.size = {b.size}');
mid = (int)(b.size / 2);
b[mid] = 10 * PI;
println($'b[{mid}] = {b[mid]}');

print('all items: ');
foreach (x in b) print((__key > 0 ? ', ' : '') + x);
println();

firstGetter = b.getFirst();

try
{
	println('first item from global scope: ' + firstGetter());
}
catch (e)
{
	println(e.message);
}

readln();
