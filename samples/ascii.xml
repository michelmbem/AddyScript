<?xml version="1.0"?>
<Program>
  <ImportDirective ModuleName="sys::console" />
  <FunctionCall FunctionName="setForeground">
    <Arguments>
      <Literal Type="string" Value="Yellow" />
    </Arguments>
    <NamedArgs />
  </FunctionCall>
  <FunctionCall FunctionName="println">
    <Arguments>
      <Literal Type="string" Value="******** THE ASCII CODE ********" />
    </Arguments>
    <NamedArgs />
  </FunctionCall>
  <FunctionCall FunctionName="println">
    <Arguments>
      <Literal Type="string" Value="" />
    </Arguments>
    <NamedArgs />
  </FunctionCall>
  <FunctionCall FunctionName="print">
    <Arguments>
      <Literal Type="string" Value="  " />
    </Arguments>
    <NamedArgs />
  </FunctionCall>
  <ForLoop>
    <Initializers>
      <Assignment Operator="None">
        <LeftOperand>
          <VariableRef Name="i" />
        </LeftOperand>
        <RightOperand>
          <Literal Type="int" Value="0" />
        </RightOperand>
      </Assignment>
    </Initializers>
    <Guard>
      <BinaryExpression Operator="LessThan">
        <LeftOperand>
          <VariableRef Name="i" />
        </LeftOperand>
        <RightOperand>
          <Literal Type="int" Value="16" />
        </RightOperand>
      </BinaryExpression>
    </Guard>
    <Updaters>
      <UnaryExpression Operator="PostIncrement">
        <Operand>
          <VariableRef Name="i" />
        </Operand>
      </UnaryExpression>
    </Updaters>
    <Action>
      <Block>
        <FunctionCall FunctionName="print">
          <Arguments>
            <Literal Type="string" Value="{0:X} " />
            <VariableRef Name="i" />
          </Arguments>
          <NamedArgs />
        </FunctionCall>
      </Block>
    </Action>
  </ForLoop>
  <FunctionCall FunctionName="println">
    <Arguments />
    <NamedArgs />
  </FunctionCall>
  <FunctionCall FunctionName="resetColor">
    <Arguments />
    <NamedArgs />
  </FunctionCall>
  <ForLoop>
    <Initializers>
      <Assignment Operator="None">
        <LeftOperand>
          <VariableRef Name="i" />
        </LeftOperand>
        <RightOperand>
          <Literal Type="int" Value="0" />
        </RightOperand>
      </Assignment>
    </Initializers>
    <Guard>
      <BinaryExpression Operator="LessThan">
        <LeftOperand>
          <VariableRef Name="i" />
        </LeftOperand>
        <RightOperand>
          <Literal Type="int" Value="16" />
        </RightOperand>
      </BinaryExpression>
    </Guard>
    <Updaters>
      <UnaryExpression Operator="PostIncrement">
        <Operand>
          <VariableRef Name="i" />
        </Operand>
      </UnaryExpression>
    </Updaters>
    <Action>
      <Block>
        <FunctionCall FunctionName="setForeground">
          <Arguments>
            <Literal Type="string" Value="Yellow" />
          </Arguments>
          <NamedArgs />
        </FunctionCall>
        <FunctionCall FunctionName="print">
          <Arguments>
            <Literal Type="string" Value="{0:X} " />
            <VariableRef Name="i" />
          </Arguments>
          <NamedArgs />
        </FunctionCall>
        <FunctionCall FunctionName="resetColor">
          <Arguments />
          <NamedArgs />
        </FunctionCall>
        <IfElse>
          <Condition>
            <UnaryExpression Operator="Not">
              <Operand>
                <BinaryExpression Operator="Contains">
                  <LeftOperand>
                    <SetInitializer>
                      <Items>
                        <Literal Type="int" Value="0" />
                        <Literal Type="int" Value="1" />
                        <Literal Type="int" Value="8" />
                        <Literal Type="int" Value="9" />
                      </Items>
                    </SetInitializer>
                  </LeftOperand>
                  <RightOperand>
                    <VariableRef Name="i" />
                  </RightOperand>
                </BinaryExpression>
              </Operand>
            </UnaryExpression>
          </Condition>
          <PositiveAction>
            <Block>
              <ForLoop>
                <Initializers>
                  <Assignment Operator="None">
                    <LeftOperand>
                      <VariableRef Name="j" />
                    </LeftOperand>
                    <RightOperand>
                      <Literal Type="int" Value="0" />
                    </RightOperand>
                  </Assignment>
                </Initializers>
                <Guard>
                  <BinaryExpression Operator="LessThan">
                    <LeftOperand>
                      <VariableRef Name="j" />
                    </LeftOperand>
                    <RightOperand>
                      <Literal Type="int" Value="16" />
                    </RightOperand>
                  </BinaryExpression>
                </Guard>
                <Updaters>
                  <UnaryExpression Operator="PostIncrement">
                    <Operand>
                      <VariableRef Name="j" />
                    </Operand>
                  </UnaryExpression>
                </Updaters>
                <Action>
                  <Block>
                    <FunctionCall FunctionName="print">
                      <Arguments>
                        <Literal Type="string" Value="{0} " />
                        <FunctionCall FunctionName="chr">
                          <Arguments>
                            <BinaryExpression Operator="Plus">
                              <LeftOperand>
                                <BinaryExpression Operator="Times">
                                  <LeftOperand>
                                    <Literal Type="int" Value="16" />
                                  </LeftOperand>
                                  <RightOperand>
                                    <VariableRef Name="i" />
                                  </RightOperand>
                                </BinaryExpression>
                              </LeftOperand>
                              <RightOperand>
                                <VariableRef Name="j" />
                              </RightOperand>
                            </BinaryExpression>
                          </Arguments>
                          <NamedArgs />
                        </FunctionCall>
                      </Arguments>
                      <NamedArgs />
                    </FunctionCall>
                  </Block>
                </Action>
              </ForLoop>
            </Block>
          </PositiveAction>
        </IfElse>
        <FunctionCall FunctionName="println">
          <Arguments />
          <NamedArgs />
        </FunctionCall>
      </Block>
    </Action>
  </ForLoop>
  <FunctionCall FunctionName="readln">
    <Arguments />
    <NamedArgs />
  </FunctionCall>
</Program>