function compare(a, b)
{
    return sign(a - b);
}

function swap(&a, &b)
{
	(a, b) = (b, a);
}

function range(begin, end = 0, incr = 1)
{
	if (incr <= 0) throw 'the increment must be positive';
	if (begin > end) swap(begin, end);
	var i = begin, l = [];
	for (; i < end; i += incr) l.add(i);
	return l;
}

function randlst(size, minimum, maximum = 0, rounding = 0)
{
	if (minimum > maximum) swap(minimum, maximum);
	var l = [], extent = maximum - minimum;
	size.times(|_| => l.add(round(minimum + extent * rand(), rounding)));
	return l;
}

function randstr(len)
{
	const alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
	var s = new System::Text::StringBuilder(), n = alphabet.length;
	len.times(|i| => s.Append(alphabet[randint(n)]));
	return s.ToString();
}

function readlst(prompt = 'values : ', separator = @'\s+', converter = null)
{
	return readln(prompt).split(separator)
						 .where(|x| => x.length > 0)
						 .select(converter ?? |x| => x);
}

if (__name == 'main') {
	l = readlst(converter: |x| => (float)x) ?? randlst(randint(20), 100);
	s = l.aggregate(.0, |x, i| => x += i);
	m = s / l.size;
	println('l = ' + l);
	println('sum(l) = ' + s);
	println('avg(l) = ' + m);
	println();
	
	l = [];
	10.times(|i| => l.add(randstr(i + 1)));
	s = l.aggregate("", |x, i| => x += "-" + i).substring(1);
	println('l = ' + l);
	println('join(l, "-") = ' + s);
	println();
	
	l = range(12, incr: 2);
	println('range(12, step: 2) = ' + l);
	readln();
}